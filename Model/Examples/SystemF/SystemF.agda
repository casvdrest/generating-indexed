module AgdaGen.Examples.SystemF.S where

  infix 20 _⇒_

  data Kind : Set where
    *   : Kind
    _⇒_ : Kind → Kind → Kind

  infix 18 _,*_

  data Ctx* : Set where
    ∅    : Ctx*
    _,*_ : Ctx* → Kind → Ctx*

  infix 16 _∋*_

  data _∋*_ : Ctx* → Kind → Set where
  
    [top*] : ∀ {φ K}
             -----------
           → φ ,* K ∋* K

    [pop*] : ∀ {φ J K} → φ ∋* K
             -------------------
           → φ ,* J ∋* K

  infix 14 _⊢*_

  data _⊢*_ (φ : Ctx*) : Kind → Set where
  
    `_  : ∀ {J} → φ ∋* J
          ---------------
        → φ ⊢* J

    ƛ_  : ∀ {K J} → φ ,* K ⊢* J
          ----------------------
        → φ ⊢* K ⇒ J

    _∙_ : ∀ {K J} → φ ⊢* K ⇒ J → φ ⊢* K
          ------------------------------
        → φ ⊢* J

    _⇒_ : φ ⊢* * → φ ⊢* *
          ----------------
        → φ ⊢* *

    Π   : ∀ {K} → φ ,* K ⊢* *
          --------------------
        → φ ⊢* *

    μ   : φ ,* * ⊢* * → φ ⊢* *



  Ren* : Ctx* → Ctx* → Set
  Ren* φ ψ = ∀ {J} → φ ∋* J → ψ ∋* J

  lift* : ∀ {φ ψ} → Ren* φ ψ → ∀ {K} → Ren* (φ ,* K) (ψ ,* K)
  lift* ρ [top*]     = [top*]
  lift* ρ ([pop*] α) = [pop*] (ρ α)

  ren* : ∀ {φ ψ} → Ren* φ ψ → ∀ {J} → φ ⊢* J → ψ ⊢* J
  ren* ρ (` α)    = ` ρ α
  ren* ρ (ƛ B)    = ƛ ren* (lift* ρ) B
  ren* ρ (A ∙ B)  = ren* ρ A ∙ ren* ρ B
  ren* ρ (A ⇒ B)  = ren* ρ A ⇒ ren* ρ B
  ren* ρ (Π B)    = Π (ren* (lift* ρ) B)
  ren* ρ (μ B)    = μ (ren* (lift* ρ) B)

  weaken* : ∀ {φ J K} → φ ⊢* J → φ ,* K ⊢* J
  weaken* = ren* [pop*]

  Sub* : Ctx* → Ctx* → Set
  Sub* φ ψ = ∀ {J} → φ ∋* J → ψ ⊢* J

  lifts* : ∀ {φ ψ} → Sub* φ ψ → ∀ {K} → Sub* (φ ,* K) (ψ ,* K)
  lifts* σ [top*]     = ` [top*]
  lifts* σ ([pop*] α) = weaken* (σ α)

  sub* : ∀ {φ ψ} → Sub* φ ψ → ∀ {K} → φ ⊢* K → ψ ⊢* K
  sub* σ (` α)    = σ α
  sub* σ (ƛ B)    = ƛ sub* (lifts* σ) B
  sub* σ (A ∙ B)  = sub* σ A ∙ sub* σ B
  sub* σ (A ⇒ B)  = sub* σ A ⇒ sub* σ B
  sub* σ (Π B)    = Π (sub* (lifts* σ) B)
  sub* σ (μ B)    = μ (sub* (lifts* σ) B)

  extend* : ∀ {φ ψ} → Sub* φ ψ → ∀ {J} → ψ ⊢* J → Sub* (φ ,* J) ψ
  extend* σ A [top*] = A
  extend* σ A ([pop*] α) = σ α

  _[_]* : ∀ {φ J K} → φ ,* K ⊢* J → φ ⊢* K → φ ⊢* J
  B [ A ]* = sub* (extend* `_ A) B

  data _≡β_ {Γ} : ∀ {J} → Γ ⊢* J → Γ ⊢* J → Set where
    β≡β : ∀ {K J} → (B : Γ ,* J ⊢* K) → (A : Γ ⊢* J) → ((ƛ B) ∙ A) ≡β (B [ A ]*) 

  infix 18 _,_

  data Ctx : Ctx* → Set where
    ∅    : Ctx ∅
    _,*_ : ∀ {φ} → Ctx φ → ∀ J → Ctx (φ ,* J)
    _,_  : ∀ {φ J} → Ctx φ → φ ⊢* J → Ctx φ

  infix 16 _∋_

  data _∋_ : ∀ {φ : Ctx*} → (Γ : Ctx φ) → φ ⊢* * → Set where

    [top]  : ∀ {φ Γ} {τ : φ ⊢* *}
             ---------------------
           → Γ , τ ∋ τ

    [popₜ] : ∀ {φ Γ K} {τ : φ ⊢* *} {σ : φ ⊢* K}
           → Γ ∋ τ
             ------------------------------------ 
           → Γ , σ ∋ τ

    [popₖ] : ∀ {φ Γ K} {τ : φ ⊢* *} → Γ ∋ τ
             -------------------------------
           → Γ ,* K ∋ weaken* τ


  data _⊢_ {φ} (Γ : Ctx φ) : (τ : φ ⊢* *) → Set where

    `_     : ∀ {τ : φ ⊢* *} → Γ ∋ τ
             -----------------------
           → Γ ⊢ τ

    ƛ      : ∀ {σ τ : φ ⊢* *} → (Γ , σ) ⊢ τ
             -------------------------------
           → Γ ⊢ (σ ⇒ τ)

    _∙_    : ∀ {σ τ : φ ⊢* *} → Γ ⊢ (σ ⇒ τ)
             ------------------------------
           → Γ ⊢ σ → Γ ⊢ τ

    Λ      : ∀ {K} {τ : φ ,* K ⊢* *} → (Γ ,* K) ⊢ τ
             ---------------------------------------
           → Γ ⊢ Π τ

    _∙*_   : ∀ {K τ} → Γ ⊢ Π τ → (σ : φ ⊢* K)
             ---------------------------------
           → Γ ⊢ (τ [ σ ]*)

    wrap   : {τ : φ ,* * ⊢* *} → Γ ⊢ (τ [ μ τ ]*)
             -------------------------------------
           → Γ ⊢ μ τ

    unwrap : {τ : φ ,* * ⊢* *} → Γ ⊢ μ τ
             ----------------------------
           → Γ ⊢ (τ [ μ τ ]*)

    conv   : {σ τ : φ ⊢* *} → σ ≡β τ → Γ ⊢ σ
             --------------------------------
           → Γ ⊢ τ
    
