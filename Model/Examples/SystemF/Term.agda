module AgdaGen.Examples.SystemF.Term where

  open import AgdaGen.Examples.SystemF.Type

  infix 18 _,_

  data Ctx : Ctx* → Set where
    ∅    : Ctx ∅
    _,*_ : ∀ {φ} → Ctx φ → ∀ J → Ctx (φ ,* J)
    _,_  : ∀ {φ J} → Ctx φ → φ ⊢* J → Ctx φ

  infix 16 _∋_

  data _∋_ : ∀ {φ : Ctx*} → (Γ : Ctx φ) → φ ⊢* * → Set where

    [top]  : ∀ {φ Γ} {τ : φ ⊢* *}
             ---------------------
           → Γ , τ ∋ τ

    [popₜ] : ∀ {φ Γ K} {τ : φ ⊢* *} {σ : φ ⊢* K}
           → Γ ∋ τ
             ------------------------------------ 
           → Γ , σ ∋ τ

    [popₖ] : ∀ {φ Γ K} {τ : φ ⊢* *} → Γ ∋ τ
             -------------------------------
           → Γ ,* K ∋ weaken* τ


  data _⊢_ {φ} (Γ : Ctx φ) : (τ : φ ⊢* *) → Set where

    `_     : ∀ {τ : φ ⊢* *} → Γ ∋ τ
             -----------------------
           → Γ ⊢ τ

    ƛ      : ∀ {σ τ : φ ⊢* *} → (Γ , σ) ⊢ τ
             -------------------------------
           → Γ ⊢ (σ ⇒ τ)

    _∙_    : ∀ {σ τ : φ ⊢* *} → Γ ⊢ (σ ⇒ τ)
             ------------------------------
           → Γ ⊢ σ → Γ ⊢ τ

    Λ      : ∀ {K} {τ : φ ,* K ⊢* *} → (Γ ,* K) ⊢ τ
             ---------------------------------------
           → Γ ⊢ Π τ

    _∙*_   : ∀ {K τ} → Γ ⊢ Π τ → (σ : φ ⊢* K)
             ---------------------------------
           → Γ ⊢ (τ [ σ ]*)

    wrap   : {τ : φ ,* * ⊢* *} → Γ ⊢ (τ [ μ τ ]*)
             -------------------------------------
           → Γ ⊢ μ τ

    unwrap : {τ : φ ,* * ⊢* *} → Γ ⊢ μ τ
             ----------------------------
           → Γ ⊢ (τ [ μ τ ]*)

    conv   : {σ τ : φ ⊢* *} → σ ≡β τ → Γ ⊢ σ
             --------------------------------
           → Γ ⊢ τ
