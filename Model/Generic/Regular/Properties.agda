open import Model.Base
open import Model.Combinators
open import Model.Enumerate
open import Model.Data using (_‚àà_; here; there; Œ†)

open import Model.Properties.Monotonicity
open import Model.Properties.General
open import Model.Properties.Completeness

open import Model.Generic.Isomorphism

open import Model.Generic.Regular.Universe
open import Model.Generic.Regular.Cogen
open import Model.Generic.Regular.Instances
open import Model.Generic.Regular.Generator

open import Data.Unit hiding (_‚â§_)
open import Data.Product using (proj‚ÇÅ; proj‚ÇÇ; _,_; Œ£; Œ£-syntax; _√ó_)
open import Data.Sum hiding (map)
open import Data.Nat
open import Data.List
open import Data.Maybe using (just; nothing; Maybe)

open import Function
open import Level hiding (suc; zero)

open import Category.Monad

open import Relation.Binary.PropositionalEquality
open Relation.Binary.PropositionalEquality.‚â°-Reasoning

module Model.Generic.Regular.Properties where

  open GApplicative ‚¶É...‚¶Ñ
  open GAlternative ‚¶É...‚¶Ñ

  ------ U Combinator (Unit) ------

  ugen-monotone :
    ‚àÄ {g : Reg} {x : ‚ü¶_‚üß {0‚Ñì} U (Fix g)} {gi : RegInfo (Œª S ‚Üí ùîæ (Œª _ ‚Üí S) tt) g}
    ‚Üí Depth-Monotone·µ¢ (deriveGen {g = g} U~) (Œª { tt ‚Üí deriveGen gi }) tt
  ugen-monotone z‚â§n ()
  ugen-monotone (s‚â§s leq) elem = elem 

  ugen-complete :
    ‚àÄ {g : Reg} {gi : RegInfo (Œª S ‚Üí ùîæ (Œª _ ‚Üí S) tt) g}
    ‚Üí Complete·µ¢ (deriveGen {g = g} U~) (Œª { tt ‚Üí deriveGen gi })
  ugen-complete = 1 , here
  
  
  ------ ‚äï combinator (Coproduct) ------

  ‚äïgen-monotone-left :
    ‚àÄ {f‚ÇÅ f‚ÇÇ g : Reg {0‚Ñì}} {tg : ùîæ (Œª _ ‚Üí ‚ü¶ g ‚üß (Fix g)) tt}
      {x : ‚ü¶ f‚ÇÅ ‚üß (Fix g)}
      {g‚ÇÅ : Gen (‚ü¶ f‚ÇÅ ‚üß (Fix g)) (Œª _ ‚Üí ‚ü¶ g ‚üß (Fix g)) tt}
      {g‚ÇÇ : Gen (‚ü¶ f‚ÇÇ ‚üß (Fix g)) (Œª _ ‚Üí ‚ü¶ g ‚üß (Fix g)) tt}
    ‚Üí Depth-Monotone·µ¢ g‚ÇÅ (Œª _ ‚Üí tg) x
    ‚Üí Depth-Monotone·µ¢ (‚¶á inj‚ÇÅ g‚ÇÅ ‚¶à ‚à• ‚¶á inj‚ÇÇ g‚ÇÇ ‚¶à) (Œª _ ‚Üí tg) (inj‚ÇÅ x)
  ‚äïgen-monotone-left {g‚ÇÅ = g‚ÇÅ} {g‚ÇÇ = g‚ÇÇ} =
    ‚à•-inj‚ÇÅ-monotone-left·µ¢ {g‚ÇÅ = g‚ÇÅ} {g‚ÇÇ = g‚ÇÇ}

  ‚äïgen-monotone-right :
    ‚àÄ {f‚ÇÅ f‚ÇÇ g : Reg {0‚Ñì}} {tg : ùîæ (Œª _ ‚Üí ‚ü¶ g ‚üß (Fix g)) tt}
      {y : ‚ü¶ f‚ÇÇ ‚üß (Fix g)}
      {g‚ÇÅ : Gen (‚ü¶ f‚ÇÅ ‚üß (Fix g)) (Œª _ ‚Üí ‚ü¶ g ‚üß (Fix g)) tt}
      {g‚ÇÇ : Gen (‚ü¶ f‚ÇÇ ‚üß (Fix g)) (Œª _ ‚Üí ‚ü¶ g ‚üß (Fix g)) tt}
    ‚Üí Depth-Monotone·µ¢ g‚ÇÇ (Œª _ ‚Üí tg) y
    ‚Üí Depth-Monotone·µ¢ (‚¶á inj‚ÇÅ g‚ÇÅ ‚¶à ‚à• ‚¶á inj‚ÇÇ g‚ÇÇ ‚¶à) (Œª _ ‚Üí tg) (inj‚ÇÇ y)
  ‚äïgen-monotone-right {g‚ÇÅ = g‚ÇÅ} {g‚ÇÇ = g‚ÇÇ} =
    ‚à•-inj‚ÇÅ-monotone-right·µ¢ {g‚ÇÅ = g‚ÇÅ} {g‚ÇÇ = g‚ÇÇ}
  
 
  -- If 'x' is produced by a generator, 'inj‚ÇÅ x' is produced by generator derived
  -- from the coproduct of that generator with any other generator
  ‚äïgen-complete-left :
    ‚àÄ {f‚ÇÅ f‚ÇÇ g : Reg {0‚Ñì}} {tg : ùîæ (Œª _ ‚Üí ‚ü¶ g ‚üß (Fix g)) tt}
      {g‚ÇÅ : Gen (‚ü¶ f‚ÇÅ ‚üß (Fix g)) (Œª _ ‚Üí ‚ü¶ g ‚üß (Fix g)) tt}
      {g‚ÇÇ : Gen (‚ü¶ f‚ÇÇ ‚üß (Fix g)) (Œª _ ‚Üí ‚ü¶ g ‚üß (Fix g)) tt}
      {x : ‚ü¶ f‚ÇÅ ‚üß (Fix g)} ‚Üí g‚ÇÅ ‚à£·µ¢ (Œª _ ‚Üí tg)  ‚Üù x
    ‚Üí (‚¶á inj‚ÇÅ g‚ÇÅ ‚¶à ‚à• ‚¶á inj‚ÇÇ g‚ÇÇ ‚¶à) ‚à£·µ¢ (Œª _ ‚Üí tg) ‚Üù inj‚ÇÅ x
  ‚äïgen-complete-left {g‚ÇÅ = g‚ÇÅ} {g‚ÇÇ = g‚ÇÇ} p =
    ‚à•·µ¢-complete-left {f = ‚¶á inj‚ÇÅ g‚ÇÅ ‚¶à} {g = ‚¶á inj‚ÇÇ g‚ÇÇ ‚¶à}
      (constr·µ¢-preserves-elem {g = g‚ÇÅ} p)

  -- If 'y' is produced by a generator, 'inj‚ÇÇ y' is produced by the generator
  -- derived from the coproduct of any generator with that generator. 
  ‚äïgen-complete-right :
    ‚àÄ {f‚ÇÅ f‚ÇÇ g : Reg {0‚Ñì}} {tg : ùîæ (Œª _ ‚Üí ‚ü¶ g ‚üß (Fix g)) tt}
      {g‚ÇÅ : Gen (‚ü¶ f‚ÇÅ ‚üß (Fix g)) (Œª _ ‚Üí ‚ü¶ g ‚üß (Fix g)) tt}
      {g‚ÇÇ : Gen (‚ü¶ f‚ÇÇ ‚üß (Fix g)) (Œª _ ‚Üí ‚ü¶ g ‚üß (Fix g)) tt}
    ‚Üí {y : ‚ü¶ f‚ÇÇ ‚üß (Fix g)} ‚Üí g‚ÇÇ ‚à£·µ¢ (Œª _ ‚Üí tg) ‚Üù y
    ‚Üí (‚¶á inj‚ÇÅ g‚ÇÅ ‚¶à ‚à• ‚¶á inj‚ÇÇ g‚ÇÇ ‚¶à) ‚à£·µ¢ (Œª _ ‚Üí tg) ‚Üù inj‚ÇÇ y
  ‚äïgen-complete-right {g‚ÇÅ = g‚ÇÅ} {g‚ÇÇ = g‚ÇÇ} p =
    ‚à•·µ¢-complete-right {f = ‚¶á inj‚ÇÅ g‚ÇÅ ‚¶à} {g = ‚¶á inj‚ÇÇ g‚ÇÇ ‚¶à}
      (constr·µ¢-preserves-elem {g = g‚ÇÇ} p)
   
  ------ ‚äó combinator (Product) ------

  ,-inv :
    ‚àÄ {a b : Set} {x‚ÇÅ x‚ÇÇ : a} {y‚ÇÅ y‚ÇÇ : b}
    ‚Üí (x‚ÇÅ , y‚ÇÅ) ‚â° (x‚ÇÇ , y‚ÇÇ) ‚Üí x‚ÇÅ ‚â° x‚ÇÇ √ó y‚ÇÅ ‚â° y‚ÇÇ
  ,-inv refl = refl , refl
  
  ‚äógen-monotone :
    ‚àÄ {f‚ÇÅ f‚ÇÇ g : Reg {0‚Ñì}} {x  : ‚ü¶ f‚ÇÅ ‚üß (Fix g)}
      {y : ‚ü¶ f‚ÇÇ ‚üß (Fix g)} {tg : ùîæ (Œª _ ‚Üí ‚ü¶ g ‚üß (Fix g)) tt}
      {g‚ÇÅ : Gen (‚ü¶ f‚ÇÅ ‚üß (Fix g)) (Œª _ ‚Üí ‚ü¶ g ‚üß (Fix g)) tt}
      {g‚ÇÇ : Gen (‚ü¶ f‚ÇÇ ‚üß (Fix g)) (Œª _ ‚Üí ‚ü¶ g ‚üß (Fix g)) tt}
    ‚Üí Depth-Monotone·µ¢ g‚ÇÅ (Œª _ ‚Üí tg) x ‚Üí Depth-Monotone·µ¢ g‚ÇÇ (Œª _ ‚Üí tg) y
    ‚Üí Depth-Monotone·µ¢ ‚¶á g‚ÇÅ , g‚ÇÇ ‚¶à (Œª _ ‚Üí tg) (x , y)
  ‚äógen-monotone {g‚ÇÅ = g‚ÇÅ} {g‚ÇÇ} mt‚ÇÅ mt‚ÇÇ =
    ‚äõ-monotone·µ¢ {g‚ÇÅ = g‚ÇÅ} {g‚ÇÇ = g‚ÇÇ} ,-inv mt‚ÇÅ mt‚ÇÇ

  -- If both operands are complete, the generator derived from a product
  -- is complete as well. 
  ‚äógen-complete :
    ‚àÄ {f‚ÇÅ f‚ÇÇ g : Reg {0‚Ñì}} {tg : ùîæ (Œª _ ‚Üí ‚ü¶ g ‚üß (Fix g)) tt}
      {g‚ÇÅ : Gen (‚ü¶ f‚ÇÅ ‚üß (Fix g)) (Œª _ ‚Üí ‚ü¶ g ‚üß (Fix g)) tt}
      {g‚ÇÇ : Gen (‚ü¶ f‚ÇÇ ‚üß (Fix g)) (Œª _ ‚Üí ‚ü¶ g ‚üß (Fix g)) tt}
      {x : ‚ü¶ f‚ÇÅ ‚üß (Fix g)} {y : ‚ü¶ f‚ÇÇ ‚üß (Fix g)}
    ‚Üí Depth-Monotone·µ¢ g‚ÇÅ (Œª _ ‚Üí tg) x ‚Üí Depth-Monotone·µ¢ g‚ÇÇ (Œª _ ‚Üí tg) y
    ‚Üí (p‚ÇÅ : g‚ÇÅ ‚à£·µ¢ (Œª _ ‚Üí tg) ‚Üù x) ‚Üí (p‚ÇÇ : g‚ÇÇ ‚à£·µ¢ (Œª _ ‚Üí tg) ‚Üù y)
    ‚Üí ‚¶á g‚ÇÅ , g‚ÇÇ ‚¶à ‚à£·µ¢ (Œª _ ‚Üí tg) ‚Üù (x , y)
  ‚äógen-complete {g‚ÇÅ = g‚ÇÅ} {g‚ÇÇ = g‚ÇÇ} mt‚ÇÅ mt‚ÇÇ p1 p2 =
    ‚äõ-complete·µ¢ {f = g‚ÇÅ} {g = g‚ÇÇ} p1 p2 mt‚ÇÅ mt‚ÇÇ
  
  In-elem :
    ‚àÄ {f : Reg {0‚Ñì}} {x : ‚ü¶ f ‚üß (Fix f)} {xs : List (‚ü¶ f ‚üß (Fix f))}
    ‚Üí In {f = f} x ‚àà map In xs ‚Üí x ‚àà xs
  In-elem {xs = []} ()
  In-elem {xs = x ‚à∑ xs} here         = here
  In-elem {xs = x ‚à∑ xs} (there elem) =
    there (In-elem elem)


  --=====================================================--
  ------ Monotonicity theorem for derived generators ------
  --=====================================================--

  deriveGen-monotone :
    ‚àÄ {f g : Reg} {x : ‚ü¶ f ‚üß (Fix g)}
    ‚Üí (info‚ÇÅ : RegInfo (Œª a ‚Üí Œ£[ gen ‚àà ùîæ (Œª _ ‚Üí a) tt ]
        (Complete·µ¢ gen (Œª _ ‚Üí gen)) √ó (‚àÄ {x : a} ‚Üí Depth-Monotone·µ¢ gen (Œª _ ‚Üí gen) x)) f)
    ‚Üí (info‚ÇÇ : RegInfo (Œª a ‚Üí Œ£[ gen ‚àà ùîæ (Œª _ ‚Üí a) tt ]
        Complete·µ¢ gen (Œª _ ‚Üí gen) √ó (‚àÄ {x : a} ‚Üí Depth-Monotone·µ¢ (gen) (Œª _ ‚Üí gen) x)) g)
    ‚Üí Depth-Monotone·µ¢ (deriveGen {g = g} (map-reginfo proj‚ÇÅ info‚ÇÅ))
                      (Œª _ ‚Üí deriveGen (map-reginfo proj‚ÇÅ info‚ÇÇ)) x
  deriveGen-monotone {U} {g} info‚ÇÅ info‚ÇÇ                                               = -- (U-combinator)
    ugen-monotone {gi = map-reginfo proj‚ÇÅ info‚ÇÇ}
  deriveGen-monotone {f‚ÇÅ ‚äï f‚ÇÇ} {g} {inj‚ÇÅ x} (info‚Çó ‚äï~ info·µ£) info‚ÇÇ (s‚â§s leq) elem      = -- (‚äï-combinator)
    ‚äïgen-monotone-left {f‚ÇÅ = f‚ÇÅ} {f‚ÇÇ = f‚ÇÇ} {g = g}
      {g‚ÇÇ = deriveGen (map-reginfo proj‚ÇÅ info·µ£)}
      (deriveGen-monotone info‚Çó info‚ÇÇ) (s‚â§s leq) elem 
  deriveGen-monotone {f‚ÇÅ ‚äï f‚ÇÇ} {g} {inj‚ÇÇ y} (info‚Çó ‚äï~ info·µ£) info‚ÇÇ (s‚â§s leq) elem      = -- (‚äó-combinator)
    ‚äïgen-monotone-right {f‚ÇÅ = f‚ÇÅ} {f‚ÇÇ = f‚ÇÇ} {g = g}
      {g‚ÇÅ = deriveGen (map-reginfo proj‚ÇÅ info‚Çó)}
      (deriveGen-monotone info·µ£ info‚ÇÇ) (s‚â§s leq) elem
  deriveGen-monotone {f‚ÇÅ ‚äó f‚ÇÇ} {g} {x = x‚ÇÅ , x‚ÇÇ} (info‚Çó ‚äó~ info·µ£) info‚ÇÇ (s‚â§s leq) elem = -- (I-combinator)
    ‚äógen-monotone {f‚ÇÅ = f‚ÇÅ} {f‚ÇÇ = f‚ÇÇ} {g = g}
      (deriveGen-monotone info‚Çó info‚ÇÇ)
      (deriveGen-monotone info·µ£ info‚ÇÇ) (s‚â§s leq) elem
  deriveGen-monotone {I} {g} {x = In x} I~ info‚ÇÇ (s‚â§s leq) elem with
    deriveGen-monotone {x = x} info‚ÇÇ info‚ÇÇ
  ... | rec = ++-elem-left {ys = []}
    (map-preserves-elem (rec leq (In-elem {f = g} (map-++-ident elem))))
  deriveGen-monotone {K x} {g} (K~ info‚ÇÅ) info‚ÇÇ (s‚â§s leq) elem                         = -- (K-combinator)
    (proj‚ÇÇ ‚àò proj‚ÇÇ) info‚ÇÅ (s‚â§s leq) elem 

 
  --=====================================================--
  ------ Completeness theorem for derived generators ------
  --=====================================================--

  deriveGen-complete :
    ‚àÄ {f g : Reg} {x : ‚ü¶ f ‚üß (Fix g)}
    ‚Üí (info‚ÇÅ : RegInfo (Œª a ‚Üí Œ£[ gen ‚àà ùîæ (Œª _ ‚Üí a) tt ]
        Complete·µ¢ gen (Œª _ ‚Üí gen) √ó (‚àÄ {x : a} ‚Üí Depth-Monotone·µ¢ gen (Œª _ ‚Üí gen) x)) f
      )
    ‚Üí (info‚ÇÇ : RegInfo (Œª a ‚Üí Œ£[ gen ‚àà ùîæ (Œª _ ‚Üí a) tt  ]
        Complete·µ¢ gen (Œª _ ‚Üí gen) √ó (‚àÄ {x : a} ‚Üí Depth-Monotone·µ¢ gen (Œª _ ‚Üí gen) x)) g
      )
    ‚Üí deriveGen (map-reginfo proj‚ÇÅ info‚ÇÅ) ‚à£·µ¢ (Œª _ ‚Üí deriveGen (map-reginfo proj‚ÇÅ info‚ÇÇ)) ‚Üù x
  deriveGen-complete {U} {g} _ info‚ÇÇ                              = -- (U-combinator)
    ugen-complete {gi = map-reginfo proj‚ÇÅ info‚ÇÇ}
  deriveGen-complete {f‚ÇÅ ‚äï f‚ÇÇ} {g} {inj‚ÇÅ x} (i‚Çó ‚äï~ i·µ£) info‚ÇÇ      =  -- (‚äï-combinator)
    ‚äïgen-complete-left {f‚ÇÅ = f‚ÇÅ} {f‚ÇÇ = f‚ÇÇ} (deriveGen-complete i‚Çó info‚ÇÇ) 
  deriveGen-complete {f‚ÇÅ ‚äï f‚ÇÇ} {g} {inj‚ÇÇ y} (i‚Çó ‚äï~ i·µ£) info‚ÇÇ =
    ‚äïgen-complete-right {f‚ÇÅ = f‚ÇÅ} {f‚ÇÇ = f‚ÇÇ} (deriveGen-complete i·µ£ info‚ÇÇ) 
  deriveGen-complete {f‚ÇÅ ‚äó f‚ÇÇ} {g} {x = x‚ÇÅ , x‚ÇÇ} (i‚Çó ‚äó~ i·µ£) info‚ÇÇ = -- (‚äó-combinator)
    ‚äógen-complete {f‚ÇÅ = f‚ÇÅ} {f‚ÇÇ = f‚ÇÇ}
      (deriveGen-monotone i‚Çó info‚ÇÇ) (deriveGen-monotone i·µ£ info‚ÇÇ)
      (deriveGen-complete i‚Çó info‚ÇÇ) (deriveGen-complete i·µ£ info‚ÇÇ)
  deriveGen-complete {I} {g} {In x} I~ info‚ÇÇ                      = let -- (I-combinator)
      (n , elem) = deriveGen-complete {x = x} info‚ÇÇ info‚ÇÇ
    in suc n , (++-elem-left (map-preserves-elem elem))
  deriveGen-complete {K x} {g} {val} (K~ (gen , (prf , mt))) info‚ÇÇ
    with prf {val}
  ... | suc n , elem                                              = suc n , elem -- (K-combinator)


  deriveGen-Complete :
    ‚àÄ {f : Reg}
    ‚Üí (info : RegInfo (Œª a ‚Üí Œ£[ gen ‚àà ùîæ (Œª _ ‚Üí a) tt ]
        Complete·µ¢ gen (Œª _ ‚Üí gen) √ó (‚àÄ {x : a} ‚Üí Depth-Monotone·µ¢ gen (Œª _ ‚Üí gen) x) ) f)
    ‚Üí Complete·µ¢ (deriveGen (map-reginfo proj‚ÇÅ info))
               (Œª _ ‚Üí deriveGen (map-reginfo proj‚ÇÅ info))
  deriveGen-Complete {f} info {x}
    with deriveGen-complete {f = f} {g = f} {x = x} (info) info
  ... | n , p = n , p


  --======================================================================--
  ------ Completeness theorem for generators derived from isomorphism ------
  --======================================================================--

  In‚Åª¬π : ‚àÄ {f : Reg {0‚Ñì}} ‚Üí Fix f ‚Üí ‚ü¶ f ‚üß (Fix f)
  In‚Åª¬π (In x) = x

  Œº-iso‚ÇÇ : ‚àÄ {f : Reg} {y : Fix f} ‚Üí In (In‚Åª¬π y) ‚â° y
  Œº-iso‚ÇÇ {y = In x} = refl

  -- Establish that `Œº is bijective
  Œº-iso : ‚àÄ {f : Reg} ‚Üí ‚ü¶ f ‚üß (Fix f) ‚âÖ Fix f
  Œº-iso = record { from = In ; to = In‚Åª¬π ; iso‚ÇÅ = refl ; iso‚ÇÇ = Œº-iso‚ÇÇ }

  -- applying a bijective function to a complete generator yields another complete generator
  lemma-‚âÖ-derive :
    ‚àÄ {a : Set} {f : Reg} {gen : Gen (‚ü¶ f ‚üß (Fix f)) (Œª _ ‚Üí ‚ü¶ f ‚üß (Fix f)) tt }
    ‚Üí (iso : a ‚âÖ Fix f) ‚Üí Complete·µ¢ gen (Œª _ ‚Üí gen)
    ‚Üí Complete·µ¢ {I = ‚ä§} (‚¶á (_‚âÖ_.to iso ‚àò In) (Call tt Œª { tt ‚Üí gen }) ‚¶à)
               (Œª { tt_ ‚Üí ‚¶á (_‚âÖ_.to iso ‚àò In) (Call tt Œª { tt ‚Üí gen }) ‚¶à })
  lemma-‚âÖ-derive {a} {f} {gen} iso p {x}
    with p {In‚Åª¬π (_‚âÖ_.from iso x)}
  ... | suc n , elem
    rewrite ap-pure-is-map {xs = ‚ü® (Œª _ ‚Üí gen) ‚ü© tt (suc n)} {C = _‚âÖ_.to iso ‚àò In} =
    suc n , ++-elem-left {xs = map (_‚âÖ_.to iso ‚àò In) (‚ü® (Œª _ ‚Üí gen) ‚ü© tt (suc n))}
      (‚àà-rewr' (_‚âÖ_.iso‚ÇÅ (‚âÖ-transitive iso (‚âÖ-symmetric Œº-iso)))
        (map-preserves-elem elem))

  isoGen-Complete :
    ‚àÄ {a : Set} ‚¶É p : Regular a ‚¶Ñ
    ‚Üí (info : RegInfo (Œª a ‚Üí Œ£[ gen ‚àà ùîæ (Œª _ ‚Üí a) tt ]
        Complete·µ¢ gen (Œª _ ‚Üí gen) √ó (‚àÄ {x : a} ‚Üí Depth-Monotone·µ¢ gen (Œª _ ‚Üí gen) x)) (getPf p))
    ‚Üí Complete·µ¢ (isoGen (Œª _ ‚Üí a) (map-reginfo proj‚ÇÅ info))
               (Œª _ ‚Üí isoGen (Œª _ ‚Üí a) (map-reginfo proj‚ÇÅ info))
  isoGen-Complete ‚¶É p ‚¶Ñ info =
    lemma-‚âÖ-derive {gen = deriveGen (map-reginfo proj‚ÇÅ info)}
      (proj‚ÇÇ (Regular.W p)) (deriveGen-Complete info)

