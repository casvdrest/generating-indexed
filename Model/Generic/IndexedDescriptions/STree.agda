{-# OPTIONS --type-in-type #-}

open import Model.Base hiding (Œº)
open import Model.Combinators
open import Model.Enumerate hiding (‚ü®_‚ü©)
open import Model.Generic.Isomorphism
open import Model.Generic.Indexed.IDesc.Universe
open import Model.Generic.Indexed.IDesc.Generator

open import Data.Product
open import Data.Sum
open import Data.Bool
open import Data.Nat
open import Data.Unit
open import Data.Fin hiding (lift; _+_)
open import Data.List hiding (fromMaybe)
open import Data.Maybe hiding (fromMaybe)

open import Level 
    renaming ( zero to zeroL 
             ; suc to sucL ) 

open import Relation.Binary.PropositionalEquality

module Model.Generic.Indexed.IDesc.STree where

  open GApplicative ‚¶É...‚¶Ñ
  open GAlternative ‚¶É...‚¶Ñ
  open GMonad       ‚¶É...‚¶Ñ

  data STree : ‚Ñï ‚Üí Set where
    Leaf : STree 0
    Node : ‚àÄ {n m} ‚Üí STree n ‚Üí STree m ‚Üí STree (suc (n + m))


  STreeD : func zeroL ‚Ñï ‚Ñï
  STreeD = func.mk
    Œª { zero    ‚Üí `œÉ 1 Œª { ‚àô ‚Üí `1 }
      ; (suc n) ‚Üí `œÉ 1 Œª { ‚àô ‚Üí `Œ£ (Œ£[ t ‚àà ‚Ñï √ó ‚Ñï ] proj‚ÇÅ t + proj‚ÇÇ t ‚â° n) Œª { ((n , m) , refl) ‚Üí `var n `√ó `var m } }
      }

  STree' : ‚Ñï ‚Üí Set
  STree' n = Œº STreeD n

  size : ‚àÄ {n : ‚Ñï} ‚Üí STree n ‚Üí ‚Ñï
  size {n} _ = n
  
  fromSTree : ‚àÄ {n : ‚Ñï} ‚Üí STree n ‚Üí STree' n
  fromSTree Leaf                 = ‚ü® (‚àô , lift tt) ‚ü©
  fromSTree {suc n} (Node n‚Çó n·µ£) = ‚ü® ‚àô , (((size n‚Çó) , (size n·µ£)) , refl) , (fromSTree n‚Çó) , (fromSTree n·µ£) ‚ü©

  toSTree : ‚àÄ {n : ‚Ñï} ‚Üí STree' n ‚Üí STree n
  toSTree {zero} ‚ü® fst , snd ‚ü©                                = Leaf
  toSTree {suc .(sl + sr)} ‚ü® ‚àô , ((sl , sr) , refl) , l , r ‚ü© =
    Node (toSTree l) (toSTree r)

  STree-iso‚ÇÅ : ‚àÄ {n : ‚Ñï} {t : STree n} ‚Üí toSTree (fromSTree t) ‚â° t
  STree-iso‚ÇÅ {zero } {Leaf}       = refl
  STree-iso‚ÇÅ {suc n} {Node n‚Çó n·µ£} =
    cong‚ÇÇ Node STree-iso‚ÇÅ STree-iso‚ÇÅ

  STree-iso‚ÇÇ : ‚àÄ {n : ‚Ñï} {t : STree' n} ‚Üí fromSTree (toSTree t) ‚â° t
  STree-iso‚ÇÇ {zero} {‚ü® ‚àô , snd ‚ü©}                                  = refl
  STree-iso‚ÇÇ {suc .(sl + sr)} {‚ü® ‚àô , ((sl , sr) , refl) , l , r ‚ü©} =
    cong‚ÇÇ (Œª l r ‚Üí ‚ü® (‚àô , ((sl , sr) , refl) , l , r) ‚ü©) STree-iso‚ÇÇ STree-iso‚ÇÇ

  instance
    STree-‚âÖIDesc : ‚âÖIDesc STree
    STree-‚âÖIDesc = record { W = STreeD , ‚âÖ-transitive (‚âÖ-symmetric ‚âÖlift) (record { from = fromSTree ; to = toSTree ; iso‚ÇÅ = STree-iso‚ÇÅ ; iso‚ÇÇ = STree-iso‚ÇÇ }) }

  genSTree : ((n : ‚Ñï) ‚Üí IDescM ùîæ (func.out STreeD n)) ‚Üí (n : ‚Ñï) ‚Üí ùîæ·µ¢ (Œª x ‚Üí Lift zeroL (STree x)) n
  genSTree m n = IDesc-isoGen n m

  +-inv : (n : ‚Ñï) ‚Üí ùîæ (Œ£[ t ‚àà ‚Ñï √ó ‚Ñï ] proj‚ÇÅ t + proj‚ÇÇ t ‚â° n)
  +-inv zero    = ‚¶á ((0 , 0) , refl) ‚¶à
  +-inv (suc n) = pure ((0 , suc n) , refl) ‚à• (
    do (n' , m') , refl ‚Üê ` (+-inv n)
       pure ((suc n' , m') , refl))

  STreeM : (n : ‚Ñï) ‚Üí IDescM ùîæ (func.out STreeD n)
  STreeM zero =
    `œÉ~ (Œª { ‚àô ‚Üí `1~
           })
  STreeM (suc n) =
    `œÉ~ (Œª { ‚àô ‚Üí `Œ£~ (+-inv n) Œª { ((n , m) , refl) ‚Üí `var~ `√ó~ `var~ }
           })

  prop : ‚ü®_‚ü©·µ¢ {f = Œª n ‚Üí Lift zeroL (STree n)} (genSTree STreeM) 3 5 ‚â°
    lift (Node Leaf (Node Leaf (Node Leaf Leaf))) ‚à∑
    lift (Node Leaf (Node (Node Leaf Leaf) Leaf)) ‚à∑
    lift (Node (Node Leaf Leaf) (Node Leaf Leaf)) ‚à∑
    lift (Node (Node Leaf (Node Leaf Leaf)) Leaf) ‚à∑
    lift (Node (Node (Node Leaf Leaf) Leaf) Leaf) ‚à∑ []
  prop = refl

  data STree‚ÇÇ : ‚Ñï ‚Üí Set where
    Leaf‚ÇÇ : STree‚ÇÇ 1
    Node‚ÇÇ : ‚àÄ {n m : ‚Ñï} ‚Üí STree‚ÇÇ n ‚Üí STree‚ÇÇ m ‚Üí STree‚ÇÇ (n + m)

  STree‚ÇÇD : func 0‚Ñì ‚Ñï ‚Ñï
  STree‚ÇÇD = func.mk
   Œª n ‚Üí `œÉ 2 Œª
     { ‚àô     ‚Üí `Œ£ (n ‚â° 1) Œª { refl ‚Üí `1 }
     ; (‚ñª ‚àô) ‚Üí `Œ£ (Œ£ (‚Ñï √ó ‚Ñï) Œª { (n' , m') ‚Üí n ‚â° n' + m' }) Œª { ((n' , m') , refl) ‚Üí `var n' `√ó `var m' }
     }

  size‚ÇÇ : ‚àÄ {n : ‚Ñï} ‚Üí STree‚ÇÇ n ‚Üí ‚Ñï
  size‚ÇÇ {n} _ = n

  fromSTree‚ÇÇ : ‚àÄ {n : ‚Ñï} ‚Üí STree‚ÇÇ n ‚Üí Œº STree‚ÇÇD n
  fromSTree‚ÇÇ {.1} Leaf‚ÇÇ = ‚ü® ‚àô , refl , lift tt ‚ü©
  fromSTree‚ÇÇ {n} (Node‚ÇÇ t‚ÇÅ t‚ÇÇ) =
    ‚ü® ((‚ñª ‚àô) , ((size‚ÇÇ t‚ÇÅ , size‚ÇÇ t‚ÇÇ) , refl) , fromSTree‚ÇÇ t‚ÇÅ , fromSTree‚ÇÇ t‚ÇÇ) ‚ü©

  toSTree‚ÇÇ : ‚àÄ {n : ‚Ñï} ‚Üí Œº STree‚ÇÇD n ‚Üí STree‚ÇÇ n
  toSTree‚ÇÇ {.1} ‚ü® ‚àô , refl , lift tt ‚ü© = Leaf‚ÇÇ
  toSTree‚ÇÇ {.(n' + m')} ‚ü® ‚ñª ‚àô , ((n' , m') , refl) , t‚ÇÅ , t‚ÇÇ ‚ü© =
    Node‚ÇÇ (toSTree‚ÇÇ t‚ÇÅ)  (toSTree‚ÇÇ t‚ÇÇ)

  STree‚ÇÇ-iso‚ÇÅ : ‚àÄ {n : ‚Ñï} {t : STree‚ÇÇ n} ‚Üí toSTree‚ÇÇ (fromSTree‚ÇÇ t) ‚â° t
  STree‚ÇÇ-iso‚ÇÅ {.1} {Leaf‚ÇÇ} = refl
  STree‚ÇÇ-iso‚ÇÅ {n} {Node‚ÇÇ t t‚ÇÅ} =
    cong‚ÇÇ Node‚ÇÇ STree‚ÇÇ-iso‚ÇÅ STree‚ÇÇ-iso‚ÇÅ

  STree‚ÇÇ-iso‚ÇÇ : ‚àÄ {n : ‚Ñï} {t : Œº STree‚ÇÇD n} ‚Üí fromSTree‚ÇÇ (toSTree‚ÇÇ t) ‚â° t
  STree‚ÇÇ-iso‚ÇÇ {.1} {‚ü® ‚àô , refl , lift tt ‚ü©} = refl
  STree‚ÇÇ-iso‚ÇÇ {.(n' + m')} {‚ü® ‚ñª ‚àô , ((n' , m') , refl) , fst , snd ‚ü©} =
    cong‚ÇÇ (Œª x y ‚Üí ‚ü® ((‚ñª ‚àô) , ((n' , m') , refl) , x , y) ‚ü©) STree‚ÇÇ-iso‚ÇÇ STree‚ÇÇ-iso‚ÇÇ
