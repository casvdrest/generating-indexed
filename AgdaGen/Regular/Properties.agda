open import AgdaGen.Base
open import AgdaGen.Monotonicity
open import AgdaGen.ListProperties
open import AgdaGen.Properties
open import AgdaGen.Regular.Generic
open import AgdaGen.Regular.Cogen
open import AgdaGen.Regular.Isomorphism
open import AgdaGen.Data using (_‚àà_; here; there; Œ†)

open import Data.Unit hiding (_‚â§_)
open import Data.Product using (proj‚ÇÅ; proj‚ÇÇ; _,_; Œ£; Œ£-syntax; _√ó_)
open import Data.Sum hiding (map)
open import Data.Nat
open import Data.List
open import Data.Maybe using (just; nothing; Maybe)

open import Function

open import Category.Monad

open import Relation.Binary.PropositionalEquality
open Relation.Binary.PropositionalEquality.‚â°-Reasoning

module AgdaGen.Regular.Properties where

  open RawMonad ‚¶É...‚¶Ñ using (_‚äõ_; pure)

  ------ U Combinator (Unit) ------

  ugen-monotone : ‚àÄ {g : Reg} {x : ‚ü¶ U ‚üß (Fix g)} {gi : RegInfo ùîæ g}
                  ‚Üí Depth-Monotone (deriveGen {g = g} U~) x (deriveGen gi)
  ugen-monotone = pure-monotone

 
  ugen-complete : ‚àÄ {g : Reg} {gi : RegInfo ùîæ g}
                  ----------------------------------------------------------
                  ‚Üí Complete (deriveGen {g = g} U~) (deriveGen gi)
  ugen-complete = 1 , here
  
  
  ------ ‚äï combinator (Coproduct) ------

  ‚äïgen-monotone-left : ‚àÄ {f‚ÇÅ f‚ÇÇ g : Reg} {tg : ùîæ (‚ü¶ g ‚üß (Fix g))}
                         {x : ‚ü¶ f‚ÇÅ ‚üß (Fix g)}
                         {g‚ÇÅ : Gen (‚ü¶ f‚ÇÅ ‚üß (Fix g)) (‚ü¶ g ‚üß (Fix g))}
                         {g‚ÇÇ : Gen (‚ü¶ f‚ÇÇ ‚üß (Fix g)) (‚ü¶ g ‚üß (Fix g))}
                       ‚Üí Depth-Monotone g‚ÇÅ x tg
                       ---------------------------------------
                       ‚Üí Depth-Monotone (‚¶á inj‚ÇÅ g‚ÇÅ ‚¶à ‚à• ‚¶á inj‚ÇÇ g‚ÇÇ ‚¶à) (inj‚ÇÅ x) tg
  ‚äïgen-monotone-left {g‚ÇÅ = g‚ÇÅ} {g‚ÇÇ = g‚ÇÇ} = ‚à•-inj‚ÇÅ-monotone-left {g‚ÇÅ = g‚ÇÅ} {g‚ÇÇ = g‚ÇÇ}

  
  ‚äïgen-monotone-right : ‚àÄ {f‚ÇÅ f‚ÇÇ g : Reg} {tg : ùîæ (‚ü¶ g ‚üß (Fix g))}
                          {y : ‚ü¶ f‚ÇÇ ‚üß (Fix g)}
                          {g‚ÇÅ : Gen (‚ü¶ f‚ÇÅ ‚üß (Fix g)) (‚ü¶ g ‚üß (Fix g))}
                          {g‚ÇÇ : Gen (‚ü¶ f‚ÇÇ ‚üß (Fix g)) (‚ü¶ g ‚üß (Fix g))}
                        ‚Üí Depth-Monotone g‚ÇÇ y tg
                        ---------------------------------------
                        ‚Üí Depth-Monotone (‚¶á inj‚ÇÅ g‚ÇÅ ‚¶à ‚à• ‚¶á inj‚ÇÇ g‚ÇÇ ‚¶à) (inj‚ÇÇ y) tg
  ‚äïgen-monotone-right {g‚ÇÅ = g‚ÇÅ} {g‚ÇÇ = g‚ÇÇ} = ‚à•-inj‚ÇÇ-monotone-right {g‚ÇÅ = g‚ÇÅ} {g‚ÇÇ = g‚ÇÇ}
  
  
  -- If 'x' is produced by a generator, 'inj‚ÇÅ x' is produced by generator derived
  -- from the coproduct of that generator with any other generator
  ‚äïgen-complete-left : ‚àÄ {f‚ÇÅ f‚ÇÇ g : Reg} {tg : ùîæ (‚ü¶ g ‚üß (Fix g))}
                         {g‚ÇÅ : Gen (‚ü¶ f‚ÇÅ ‚üß (Fix g)) (‚ü¶ g ‚üß (Fix g))}
                         {g‚ÇÇ : Gen (‚ü¶ f‚ÇÇ ‚üß (Fix g)) (‚ü¶ g ‚üß (Fix g))}
                         {x : ‚ü¶ f‚ÇÅ ‚üß (Fix g)} ‚Üí g‚ÇÅ ‚à£ tg  ‚Üù x
                       --------------------------------------
                       ‚Üí (‚¶á inj‚ÇÅ g‚ÇÅ ‚¶à ‚à• ‚¶á inj‚ÇÇ g‚ÇÇ ‚¶à) ‚à£ tg ‚Üù inj‚ÇÅ x
  ‚äïgen-complete-left {g‚ÇÅ = g‚ÇÅ} {g‚ÇÇ = g‚ÇÇ} p =
    ‚à•-complete-left {f = ‚¶á inj‚ÇÅ g‚ÇÅ ‚¶à} {g = ‚¶á inj‚ÇÇ g‚ÇÇ ‚¶à}
      (constr-preserves-elem {g = g‚ÇÅ} p)
      
  
  -- If 'y' is produced by a generator, 'inj‚ÇÇ y' is produced by the generator
  -- derived from the coproduct of any generator with that generator. 
  ‚äïgen-complete-right : ‚àÄ {f‚ÇÅ f‚ÇÇ g : Reg} {tg : ùîæ (‚ü¶ g ‚üß (Fix g))}
                          {g‚ÇÅ : Gen (‚ü¶ f‚ÇÅ ‚üß (Fix g)) (‚ü¶ g ‚üß (Fix g))}
                          {g‚ÇÇ : Gen (‚ü¶ f‚ÇÇ ‚üß (Fix g)) (‚ü¶ g ‚üß (Fix g))}
                        ‚Üí {y : ‚ü¶ f‚ÇÇ ‚üß (Fix g)} ‚Üí g‚ÇÇ ‚à£ tg ‚Üù y
                        -------------------------------------
                        ‚Üí (‚¶á inj‚ÇÅ g‚ÇÅ ‚¶à ‚à• ‚¶á inj‚ÇÇ g‚ÇÇ ‚¶à) ‚à£ tg ‚Üù inj‚ÇÇ y
  ‚äïgen-complete-right {g‚ÇÅ = g‚ÇÅ} {g‚ÇÇ = g‚ÇÇ} p =
    ‚à•-complete-right {f = ‚¶á inj‚ÇÅ g‚ÇÅ ‚¶à} {g = ‚¶á inj‚ÇÇ g‚ÇÇ ‚¶à}
      (constr-preserves-elem {g = g‚ÇÇ} p)
  
  
  ------ ‚äó combinator (Product) ------

  ,-inv : ‚àÄ {a b : Set} {x‚ÇÅ x‚ÇÇ : a} {y‚ÇÅ y‚ÇÇ : b} ‚Üí (x‚ÇÅ , y‚ÇÅ) ‚â° (x‚ÇÇ , y‚ÇÇ) ‚Üí x‚ÇÅ ‚â° x‚ÇÇ √ó y‚ÇÅ ‚â° y‚ÇÇ
  ,-inv refl = refl , refl

    
  ‚äógen-monotone : ‚àÄ {f‚ÇÅ f‚ÇÇ g : Reg} {x  : ‚ü¶ f‚ÇÅ ‚üß (Fix g)}
                    {y : ‚ü¶ f‚ÇÇ ‚üß (Fix g)} {tg : ùîæ (‚ü¶ g ‚üß (Fix g))}
                    {g‚ÇÅ : Gen (‚ü¶ f‚ÇÅ ‚üß (Fix g)) (‚ü¶ g ‚üß (Fix g))}
                    {g‚ÇÇ : Gen (‚ü¶ f‚ÇÇ ‚üß (Fix g)) (‚ü¶ g ‚üß (Fix g))}
                  ‚Üí Depth-Monotone g‚ÇÅ x tg ‚Üí Depth-Monotone g‚ÇÇ y tg
                  -------------------------------------------------
                  ‚Üí Depth-Monotone ‚¶á g‚ÇÅ , g‚ÇÇ ‚¶à (x , y) tg
  ‚äógen-monotone {g‚ÇÅ = g‚ÇÅ} {g‚ÇÇ} mt‚ÇÅ mt‚ÇÇ = ‚äõ-monotone {g‚ÇÅ = g‚ÇÅ} {g‚ÇÇ = g‚ÇÇ} ,-inv mt‚ÇÅ mt‚ÇÇ

  
  -- If both operands are complete, the generator derived from a product
  -- is complete as well. 
  ‚äógen-complete : ‚àÄ {f‚ÇÅ f‚ÇÇ g : Reg} {tg : ùîæ (‚ü¶ g ‚üß (Fix g))}
                    {g‚ÇÅ : Gen (‚ü¶ f‚ÇÅ ‚üß (Fix g)) (‚ü¶ g ‚üß (Fix g))}
                    {g‚ÇÇ : Gen (‚ü¶ f‚ÇÇ ‚üß (Fix g)) (‚ü¶ g ‚üß (Fix g))}
                    {x : ‚ü¶ f‚ÇÅ ‚üß (Fix g)} {y : ‚ü¶ f‚ÇÇ ‚üß (Fix g)}
                  ‚Üí Depth-Monotone g‚ÇÅ x tg ‚Üí Depth-Monotone g‚ÇÇ y tg
                  ‚Üí (p‚ÇÅ : g‚ÇÅ ‚à£ tg ‚Üù x) ‚Üí (p‚ÇÇ : g‚ÇÇ ‚à£ tg ‚Üù y)
                  --------------------------------------
                  ‚Üí ‚¶á g‚ÇÅ , g‚ÇÇ ‚¶à ‚à£ tg ‚Üù (x , y)
  ‚äógen-complete {g‚ÇÅ = g‚ÇÅ} {g‚ÇÇ = g‚ÇÇ} mt‚ÇÅ mt‚ÇÇ p1 p2 =
    ‚äõ-complete {f = g‚ÇÅ} {g = g‚ÇÇ} p1 p2 mt‚ÇÅ mt‚ÇÇ

  
  In-elem : ‚àÄ {f : Reg} {x : ‚ü¶ f ‚üß (Fix f)} {xs : List (‚ü¶ f ‚üß (Fix f))} ‚Üí In {f = f} x ‚àà map In xs ‚Üí x ‚àà xs
  In-elem {xs = []} ()
  In-elem {xs = x ‚à∑ xs} here = here
  In-elem {xs = x ‚à∑ xs} (there elem) = there (In-elem elem)

  --=====================================================--
  ------ Monotonicity theorem for derived generators ------
  --=====================================================--

  deriveGen-monotone :
    ‚àÄ {f g : Reg} {x : ‚ü¶ f ‚üß (Fix g)}
    ‚Üí (info‚ÇÅ : RegInfo (Œª a ‚Üí Œ£[ gen ‚àà ùîæ a ]
        (Complete gen gen) √ó (‚àÄ {x : a} ‚Üí Depth-Monotone gen x gen)) f)
    ‚Üí (info‚ÇÇ : RegInfo (Œª a ‚Üí Œ£[ gen ‚àà ùîæ a ]
        Complete gen gen √ó (‚àÄ {x : a} ‚Üí Depth-Monotone (gen) x gen)) g)
    ‚Üí Depth-Monotone (deriveGen {g = g} (map-reginfo proj‚ÇÅ info‚ÇÅ))
                      x (deriveGen (map-reginfo proj‚ÇÅ info‚ÇÇ))
  deriveGen-monotone {U} {g} info‚ÇÅ info‚ÇÇ =
    ugen-monotone {gi = map-reginfo proj‚ÇÅ info‚ÇÇ}
  deriveGen-monotone {f‚ÇÅ ‚äï f‚ÇÇ} {g} {inj‚ÇÅ x} (info‚Çó ‚äï~ info·µ£) info‚ÇÇ (s‚â§s leq) elem =
    ‚äïgen-monotone-left {f‚ÇÅ = f‚ÇÅ} {f‚ÇÇ = f‚ÇÇ} {g = g}
      {g‚ÇÇ = deriveGen (map-reginfo proj‚ÇÅ info·µ£)}
      (deriveGen-monotone info‚Çó info‚ÇÇ) (s‚â§s leq) elem 
  deriveGen-monotone {f‚ÇÅ ‚äï f‚ÇÇ} {g} {inj‚ÇÇ y} (info‚Çó ‚äï~ info·µ£) info‚ÇÇ (s‚â§s leq) elem  =
    ‚äïgen-monotone-right {f‚ÇÅ = f‚ÇÅ} {f‚ÇÇ = f‚ÇÇ} {g = g}
      {g‚ÇÅ = deriveGen (map-reginfo proj‚ÇÅ info‚Çó)}
      (deriveGen-monotone info·µ£ info‚ÇÇ) (s‚â§s leq) elem
  deriveGen-monotone {f‚ÇÅ ‚äó f‚ÇÇ} {g} {x = x‚ÇÅ , x‚ÇÇ} (info‚Çó ‚äó~ info·µ£) info‚ÇÇ (s‚â§s leq) elem =
    ‚äógen-monotone {f‚ÇÅ = f‚ÇÅ} {f‚ÇÇ = f‚ÇÇ} {g = g}
      (deriveGen-monotone info‚Çó info‚ÇÇ)
      (deriveGen-monotone info·µ£ info‚ÇÇ) (s‚â§s leq) elem
  deriveGen-monotone {I} {g} {x = In x} I~ info‚ÇÇ (s‚â§s leq) elem with
    deriveGen-monotone {x = x} info‚ÇÇ info‚ÇÇ
  ... | rec = ++-elem-left {ys = []}
    (map-preserves-elem (rec leq (In-elem {f = g} (map-++-ident elem))))
  deriveGen-monotone {K x} {g} (K~ info‚ÇÅ) info‚ÇÇ (s‚â§s leq) elem =
    (proj‚ÇÇ ‚àò proj‚ÇÇ) info‚ÇÅ (s‚â§s leq) elem 

  
  --=====================================================--
  ------ Completeness theorem for derived generators ------
  --=====================================================--

  deriveGen-complete :
    ‚àÄ {f g : Reg} {x : ‚ü¶ f ‚üß (Fix g)}
    ‚Üí (info‚ÇÅ : RegInfo (Œª a ‚Üí Œ£[ gen ‚àà ùîæ a ]
        Complete gen gen √ó (‚àÄ {x : a} ‚Üí Depth-Monotone gen x gen)) f
      )
    ‚Üí (info‚ÇÇ : RegInfo (Œª a ‚Üí Œ£[ gen ‚àà ùîæ a ]
        Complete gen gen √ó (‚àÄ {x : a} ‚Üí Depth-Monotone gen x gen)) g
      )
    ‚Üí deriveGen (map-reginfo proj‚ÇÅ info‚ÇÅ) ‚à£ deriveGen (map-reginfo proj‚ÇÅ info‚ÇÇ) ‚Üù x
  deriveGen-complete {U} {g} _ info‚ÇÇ =
    ugen-complete {gi = map-reginfo proj‚ÇÅ info‚ÇÇ}
  deriveGen-complete {f‚ÇÅ ‚äï f‚ÇÇ} {g} {inj‚ÇÅ x} (i‚Çó ‚äï~ i·µ£) info‚ÇÇ =
    ‚äïgen-complete-left {f‚ÇÅ = f‚ÇÅ} {f‚ÇÇ = f‚ÇÇ} (deriveGen-complete i‚Çó info‚ÇÇ) 
  deriveGen-complete {f‚ÇÅ ‚äï f‚ÇÇ} {g} {inj‚ÇÇ y} (i‚Çó ‚äï~ i·µ£) info‚ÇÇ =
    ‚äïgen-complete-right {f‚ÇÅ = f‚ÇÅ} {f‚ÇÇ = f‚ÇÇ} (deriveGen-complete i·µ£ info‚ÇÇ) 
  deriveGen-complete {f‚ÇÅ ‚äó f‚ÇÇ} {g} {x = x‚ÇÅ , x‚ÇÇ} (i‚Çó ‚äó~ i·µ£) info‚ÇÇ =
    ‚äógen-complete {f‚ÇÅ = f‚ÇÅ} {f‚ÇÇ = f‚ÇÇ}
      (deriveGen-monotone i‚Çó info‚ÇÇ) (deriveGen-monotone i·µ£ info‚ÇÇ)
      (deriveGen-complete i‚Çó info‚ÇÇ) (deriveGen-complete i·µ£ info‚ÇÇ)
  deriveGen-complete {I} {g} {In x} I~ info‚ÇÇ = let
      (n , elem) = deriveGen-complete {x = x} info‚ÇÇ info‚ÇÇ
    in suc n , (++-elem-left (map-preserves-elem elem))
  deriveGen-complete {K x} {g} {val} (K~ (gen , (prf , mt))) info‚ÇÇ with prf {val}
  ... | suc n , elem = suc n , elem


  deriveGen-Complete :
    ‚àÄ {f : Reg}
    ‚Üí (info : RegInfo (Œª a ‚Üí Œ£[ gen ‚àà ùîæ a ]
        Complete gen gen √ó (‚àÄ {x : a} ‚Üí Depth-Monotone gen x gen) ) f)
    ‚Üí Complete (deriveGen (map-reginfo proj‚ÇÅ info)) (deriveGen (map-reginfo proj‚ÇÅ info))
  deriveGen-Complete {f} info {x}
    with deriveGen-complete {f = f} {g = f} {x = x} (info) info
  ... | n , p = n , p


  --======================================================================--
  ------ Completeness theorem for generators derived from isomorphism ------
  --======================================================================--

  In‚Åª¬π : ‚àÄ {f : Reg} ‚Üí Fix f ‚Üí ‚ü¶ f ‚üß (Fix f)
  In‚Åª¬π (In x) = x

  Œº-iso‚ÇÇ : ‚àÄ {f : Reg} {y : Fix f} ‚Üí In (In‚Åª¬π y) ‚â° y
  Œº-iso‚ÇÇ {y = In x} = refl

  -- Establish that `Œº is bijective
  Œº-iso : ‚àÄ {f : Reg} ‚Üí ‚ü¶ f ‚üß (Fix f) ‚âÖ Fix f
  Œº-iso = record { from = In ; to = In‚Åª¬π ; iso‚ÇÅ = refl ; iso‚ÇÇ = Œº-iso‚ÇÇ }

  -- applying a bijective function to a complete generator yields another complete generator
  lemma-‚âÖ-derive :
    ‚àÄ {a : Set} {f : Reg} {gen : Gen (‚ü¶ f ‚üß (Fix f)) (‚ü¶ f ‚üß (Fix f)) }
    ‚Üí (iso : a ‚âÖ Fix f) ‚Üí Complete gen gen ‚Üí Complete (‚¶á (_‚âÖ_.to iso ‚àò In) (` gen) ‚¶à) (‚¶á (_‚âÖ_.to iso ‚àò In) (` gen) ‚¶à)
  lemma-‚âÖ-derive {a} {f} {gen} iso p {x} with p {In‚Åª¬π (_‚âÖ_.from iso x)}
  ... | suc n , elem rewrite ap-pure-is-map {xs = ‚ü® gen ‚ü© (suc n)} {C = _‚âÖ_.to iso ‚àò In} =
    suc n , ++-elem-left {xs = map (_‚âÖ_.to iso ‚àò In) (‚ü® gen ‚ü© (suc n))}
      (‚àà-rewr' (_‚âÖ_.iso‚ÇÅ (‚âÖ-transitive iso (‚âÖ-symmetric Œº-iso))) (map-preserves-elem elem))

  isoGen-Complete :
    ‚àÄ {a : Set} ‚¶É p : Regular a ‚¶Ñ
    ‚Üí (info : RegInfo (Œª a ‚Üí Œ£[ gen ‚àà ùîæ a ]
        Complete gen gen √ó (‚àÄ {x : a} ‚Üí Depth-Monotone gen x gen)) (getPf p))
    ‚Üí Complete (isoGen a (map-reginfo proj‚ÇÅ info))
               (isoGen a (map-reginfo proj‚ÇÅ info))
  isoGen-Complete ‚¶É p ‚¶Ñ info =
    lemma-‚âÖ-derive {gen = deriveGen (map-reginfo proj‚ÇÅ info)}
      (proj‚ÇÇ (Regular.W p)) (deriveGen-Complete info)
