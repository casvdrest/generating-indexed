open import AgdaGen.Base hiding (โจ_โฉ; ฮผ)
open import AgdaGen.Combinators
open import AgdaGen.Indexed.IDesc

open import Data.Product
open import Data.Sum
open import Data.Bool
open import Data.Nat
open import Data.Unit
open import Data.Fin hiding (lift; _+_)
open import Data.List hiding (fromMaybe)
open import Data.Maybe hiding (fromMaybe)

open import Level 
    renaming ( zero to zeroL 
             ; suc to sucL ) 

open import Relation.Binary.PropositionalEquality

module AgdaGen.Indexed.IDescExamples where

  BoolD : func zeroL โค โค
  BoolD = func.mk ฮป { tt โ 
    `ฯ 2 (ฮป {  โ    โ `1 
            ; (โป โ) โ `1
            }) }

  Bool' : Set 
  Bool' = ฮผ BoolD tt

  boolGen : ๐พ Bool'
  boolGen = โฆ โจ_โฉ (`
             ( โฆ (โ   , lift tt) โฆ
             โฅ โฆ (โป โ , lift tt) โฆ )
            )โฆ
  
  fromBool : Bool โ Bool'
  fromBool false = โจ (โ   , (lift tt)) โฉ
  fromBool true  = โจ (โป โ , (lift tt)) โฉ

  toBool : Bool' โ Bool
  toBool โจ โ      , lift tt โฉ = false
  toBool โจ โป โ    , lift tt โฉ = true

  Bool-isoโ : โ {b : Bool} โ toBool (fromBool b) โก b
  Bool-isoโ {false} = refl
  Bool-isoโ {true } = refl

  Bool-isoโ : โ {b : Bool'} โ fromBool (toBool b) โก b
  Bool-isoโ {โจ โ      , lift tt โฉ} = refl
  Bool-isoโ {โจ โป โ    , lift tt โฉ} = refl
  
  NatD : func zeroL โค โค
  NatD = func.mk ฮป { tt โ
    `ฯ 2 (ฮป {  โ     โ `1
            ; (โป โ ) โ `var tt
            })}

  Nat : Set
  Nat = ฮผ NatD tt

  z : Nat 
  z = โจ โ , lift tt โฉ

  s : Nat โ Nat
  s n = โจ (โป โ , n) โฉ

  toNat : โ โ Nat
  toNat zero    = z
  toNat (suc n) = s (toNat n)

  fromNat : Nat โ โ
  fromNat โจ โ   , lift tt โฉ = 0
  fromNat โจ โป โ , rec     โฉ = suc (fromNat rec)
  
  Nat-isoโ : โ {n : โ} โ fromNat (toNat n) โก n
  Nat-isoโ {zero } = refl
  Nat-isoโ {suc n} = cong suc Nat-isoโ

  Nat-isoโ : โ {n : Nat} โ toNat (fromNat n) โก n
  Nat-isoโ {โจ โ   , snd โฉ} = refl
  Nat-isoโ {โจ โป โ , snd โฉ} = cong (ฮป x โ โจ โป โ , x โฉ) Nat-isoโ

  OptionD : (a : Set) โ func zeroL โค โค
  OptionD a = func.mk ฮป { tt โ
    `ฯ 2 ฮป {  โ    โ `1
           ; (โป โ) โ `ฮฃ a ฮป _ โ `1
           } }

  Option : Set โ Set
  Option a = ฮผ (OptionD a) tt

  nothing' : โ {a : Set} โ Option a
  nothing' = โจ โ , lift tt โฉ

  just' : โ {a : Set} โ a โ Option a
  just' x = โจ โป โ , x , lift tt โฉ

  fromMaybe : โ {a : Set} โ Maybe a โ Option a
  fromMaybe (just x) = just' x
  fromMaybe nothing  = nothing'

  toMaybe : โ {a : Set} โ Option a โ Maybe a
  toMaybe โจ โ       , lift tt โฉ = nothing
  toMaybe โจ โป โ , x , lift tt โฉ = just x

  Maybe-isoโ : โ {a : Set} {m : Maybe a} โ toMaybe (fromMaybe m) โก m
  Maybe-isoโ {_} {just x } = refl
  Maybe-isoโ {_} {nothing} = refl

  Maybe-isoโ : โ {a : Set} {o : Option a} โ fromMaybe (toMaybe o) โก o
  Maybe-isoโ {_} {โจ โ       , lift tt โฉ} = refl
  Maybe-isoโ {_} {โจ โป โ , x , lift tt โฉ} = refl

  FinD : func zeroL โ โ
  FinD = func.mk
    ฮป { zero     โ `ฯ 0 ฮป ()
      ; (suc ix) โ `ฯ 2
        ฮป {  โ    โ `1
          ; (โป โ) โ `var ix
          } }

  Fin' : โ โ  Set
  Fin' n = ฮผ FinD n

  fz : โ {n : โ} โ Fin' (suc n)
  fz = โจ โ , lift tt โฉ

  fs : โ {n : โ} โ Fin' n โ Fin' (suc n)
  fs n = โจ (โป โ , n) โฉ

  toFin' : โ {n : โ} โ Fin n โ Fin' n
  toFin' zero     = fz
  toFin' (suc fn) = fs (toFin' fn)

  fromFin' : โ {n : โ} โ Fin' n โ Fin n
  fromFin' {suc n} โจ โ   , lift tt โฉ = zero
  fromFin' {suc n} โจ โป โ , rec     โฉ = suc (fromFin' rec)

  Fin'-isoโ : โ {n : โ} {fn : Fin n} โ fromFin' (toFin' fn) โก fn
  Fin'-isoโ {.(suc _)} {zero  } = refl
  Fin'-isoโ {.(suc _)} {suc fn} = cong suc Fin'-isoโ


  Fin'-isoโ : โ {n : โ} {fn : Fin' n} โ toFin' (fromFin' fn) โก fn
  Fin'-isoโ {suc n} {โจ โ   , lift tt โฉ} = refl
  Fin'-isoโ {suc n} {โจ โป โ , rec     โฉ} =
    cong (ฮป x โ โจ (โป โ , x) โฉ) Fin'-isoโ

  data STree : โ โ Set where
    Leaf : STree 0
    Node : โ {n m} โ STree n โ STree m โ STree (suc (n + m))


  STreeD : func zeroL โ โ
  STreeD = func.mk
    ฮป { zero    โ `ฯ 1 ฮป { โ โ `1 }
      ; (suc n) โ `ฯ 1 ฮป { โ โ `ฮฃ (โ ร โ) ฮป { (l , r ) โ
          `ฮฃ (l + r โก n) ฮป { refl โ `var l `ร `var r }} }
      }

  STree' : โ โ Set
  STree' n = ฮผ STreeD n

  size : โ {n : โ} โ STree n โ โ
  size {n} _ = n
  
  fromSTree : โ {n : โ} โ STree n โ STree' n
  fromSTree Leaf                 = โจ (โ , lift tt) โฉ
  fromSTree {suc n} (Node nโ nแตฃ) =
    โจ (โ , (size nโ , size nแตฃ) , refl , fromSTree nโ , fromSTree nแตฃ) โฉ

  toSTree : โ {n : โ} โ STree' n โ STree n
  toSTree {zero} โจ fst , snd โฉ                                = Leaf
  toSTree {suc .(sl + sr)} โจ โ , (sl , sr) , refl , nโ , nแตฃ โฉ =
    Node (toSTree nโ) (toSTree nแตฃ)

  STree-isoโ : โ {n : โ} {t : STree n} โ toSTree (fromSTree t) โก t
  STree-isoโ {zero } {Leaf}       = refl
  STree-isoโ {suc n} {Node nโ nแตฃ} =
    congโ Node STree-isoโ STree-isoโ

  STree-isoโ : โ {n : โ} {t : STree' n} โ fromSTree (toSTree t) โก t
  STree-isoโ {zero} {โจ โ , snd โฉ}                                  = refl
  STree-isoโ {suc .(sl + sr)} {โจ โ , (sl , sr) , refl , nโ , nแตฃ โฉ} =
    congโ (ฮป rโ rโ โ โจ โ , (sl , sr) , refl , (rโ , rโ) โฉ) STree-isoโ STree-isoโ

  data _โ_ {a : Set} (x : a) : List a โ  Set where
    here  : โ {xs : List a} โ x โ (x โท xs)
    there : โ {y : a} {xs : List a} โ x โ xs โ x โ (y โท xs)

  โD : โ {a : Set} โ a โ func zeroL (List a) (List a)
  โD {a} v = func.mk
    ฮป { []       โ `ฯ 0 ฮป ()
      ; (x โท xs) โ `ฯ 2
           ฮป {  โ    โ `ฮฃ (x โก v) ฮป { refl โ `1 }
             ; (โป โ) โ `var xs
             }
      }

  _โ'_ : โ {a : Set} โ a โ List a โ Set
  x โ' xs = ฮผ (โD x) xs

  fromโ : โ {a : Set} {x : a} {xs : List a} โ x โ xs โ x โ' xs
  fromโ here         = โจ โ   , refl , lift tt โฉ
  fromโ (there elem) = โจ โป โ , fromโ elem     โฉ

  toโ : โ {a : Set} {x : a} {xs : List a} โ x โ' xs โ x โ xs
  toโ {xs = x โท xs} โจ โ   , refl , lift tt โฉ = here
  toโ {xs = x โท xs} โจ โป โ        , rec     โฉ = there (toโ rec)

  โ-isoโ : โ {a : Set} {x : a} {xs : List a} {elem : x โ xs} โ toโ (fromโ elem) โก elem
  โ-isoโ {elem = here}       = refl
  โ-isoโ {elem = there elem} = cong there โ-isoโ

  โ-isoโ : โ {a : Set} {x : a} {xs : List a} {elem : x โ' xs} โ fromโ (toโ elem) โก elem
  โ-isoโ {xs = x โท xs} {โจ โ   , refl , lift tt โฉ} = refl
  โ-isoโ {xs = x โท xs} {โจ โป โ        , _       โฉ} =
    cong (ฮป v โ โจ ((โป โ) , v) โฉ) โ-isoโ

  data Ty : Set where
    `ฯ   : Ty
    _`โ_ : Ty โ Ty โ Ty

  Id : Set
  Id = โ

  data Ctx : Set where
    โ     : Ctx
    _,_โถ_ : Ctx โ Id โ Ty โ Ctx

  data [_โฆ_]_ (ฮฑ : Id) (ฯ : Ty) : Ctx โ Set where

    TOP : โ {ฮ : Ctx}
        -----------------------
        โ [ ฮฑ โฆ ฯ ] (ฮ , ฮฑ โถ ฯ)

    POP : โ {ฮ : Ctx} {ฮฒ : Id} {ฯ : Ty}
        โ [ ฮฑ โฆ ฯ ] ฮ
        -------------------------------
        โ [ ฮฑ โฆ ฯ ] (ฮ , ฮฒ โถ ฯ)

  โฆD : Id โ Ty โ func zeroL Ctx Ctx
  โฆD ฮฑ ฯ = func.mk
    ฮป { โ             โ `ฯ 0 ฮป ()
      ; (ฮ , ฮฒ โถ ฯ)   โ `ฯ 2
          ฮป {  โ    โ `ฮฃ (ฮฑ โก ฮฒ) ฮป { refl โ `ฮฃ (ฯ โก ฯ) ฮป { refl โ `1 } }
            ; (โป โ) โ `var ฮ
            } }

  [_โฆ_]'_ : Id โ Ty โ Ctx โ Set
  [ ฮฑ โฆ ฯ ]' ฮ = ฮผ (โฆD ฮฑ ฯ) ฮ

  fromโฆ : โ {ฮฑ : Id} {ฯ : Ty} {ฮ : Ctx} โ [ ฮฑ โฆ ฯ ] ฮ โ [ ฮฑ โฆ ฯ ]' ฮ
  fromโฆ TOP      = โจ โ   , refl , refl , lift tt โฉ
  fromโฆ (POP jd) = โจ โป โ , fromโฆ jd              โฉ

  toโฆ : โ {ฮฑ : Id} {ฯ : Ty} {ฮ : Ctx} โ ([ ฮฑ โฆ ฯ ]' ฮ โ [ ฮฑ โฆ ฯ ] ฮ)
  toโฆ {ฮ = ฮ , ฮฒ โถ ฯ} โจ โ , refl , refl , lift tt โฉ = TOP
  toโฆ {ฮ = ฮ , ฮฒ โถ ฯ} โจ โป โ , rec                 โฉ = POP (toโฆ rec)

  โฆ-isoโ : โ {ฮฑ : Id} {ฯ : Ty} {ฮ : Ctx} {jd : [ ฮฑ โฆ ฯ ] ฮ} โ toโฆ (fromโฆ jd) โก jd
  โฆ-isoโ {jd = TOP}    = refl
  โฆ-isoโ {jd = POP jd} = cong POP โฆ-isoโ
  
  โฆ-isoโ : โ {ฮฑ : Id} {ฯ : Ty} {ฮ : Ctx} {jd : [ ฮฑ โฆ ฯ ]' ฮ} โ fromโฆ (toโฆ jd) โก jd
  โฆ-isoโ {ฮ = ฮ , ฮฒ โถ ฯ} {โจ โ , refl , refl , lift tt โฉ} = refl
  โฆ-isoโ {ฮ = ฮ , ฮฒ โถ ฯ} {โจ โป โ , _                   โฉ} =
    cong (ฮป x โ โจ ((โป โ) , x) โฉ) โฆ-isoโ

  data Tm : Set where
    $_  : Id โ Tm
    ฮ_โ_ : Id โ Tm โ Tm
    _โ_  : Tm โ Tm โ Tm

  data _โข_โถ_ (ฮ : Ctx) : Tm โ Ty โ Set where

    VAR : โ {ฮฑ ฯ} โ [ ฮฑ โฆ ฯ ] ฮ
          ---------------------
        โ ฮ โข $ ฮฑ โถ ฯ

    
    ABS : โ {ฮฑ ฯ ฯ t} โ (ฮ , ฮฑ โถ ฯ) โข t โถ ฯ
          ----------------------------------
        โ ฮ โข ฮ ฮฑ โ t โถ (ฯ `โ ฯ)

    
    APP : โ {tโ tโ ฯ ฯ} โ ฮ โข tโ โถ (ฯ `โ ฯ) โ ฮ โข tโ โถ ฯ
          ------------------------------------------------
        โ ฮ โข tโ โ tโ โถ ฯ
 
  โขD : func zeroL (Ctx ร Tm ร Ty) (Ctx ร Tm ร Ty)
  โขD = func.mk
    ฮป { (ฮ , ($ ฮฑ) , ฯ)     โ `ฯ 1
          (ฮป { โ โ `ฮฃ ([ ฮฑ โฆ ฯ ] ฮ) ฮป _ โ `1 })
      ; (ฮ , (ฮ ฮฑ โ t) , `ฯ      ) โ `ฯ 0 ฮป ()
      ; (ฮ , (ฮ ฮฑ โ t) , (ฯ `โ ฯ)) โ `ฯ 1
          (ฮป { โ โ `var ((ฮ , ฮฑ โถ ฯ) , t , ฯ) } )
      ; (ฮ , (tโ โ tโ) , ฯ)  โ `ฯ 1
          (ฮป { โ โ `ฮฃ Ty ฮป ฯ โ
               `var (ฮ , tโ , ฯ `โ ฯ) `ร `var (ฮ , tโ , ฯ) })
      }

  _โข'_โถ_ : Ctx โ Tm โ Ty โ Set
  ฮ โข' t โถ ฯ = ฮผ โขD (ฮ , t , ฯ)
  
  โขโTy : โ {ฮ : Ctx} {t : Tm} {ฯ : Ty} โ ฮ โข t โถ ฯ โ Ty
  โขโTy {ฯ = ฯ} _ = ฯ

  fromโข : โ {ฮ : Ctx} {t : Tm} {ฯ : Ty} โ ฮ โข t โถ ฯ โ ฮ โข' t โถ ฯ
  fromโข (VAR x)       = โจ (โ , x , lift tt) โฉ
  fromโข (ABS jd)      = โจ (โ , fromโข jd) โฉ
  fromโข (APP jdโ jdโ) = โจ (โ , โขโTy jdโ , fromโข jdโ , fromโข jdโ) โฉ

  toโข : โ {ฮ : Ctx} {t : Tm} {ฯ : Ty} โ ฮ โข' t โถ ฯ โ ฮ โข t โถ ฯ
  toโข {t = $ ฮฑ    } {ฯ      } โจ โ , var , lift tt โฉ = VAR var
  toโข {t = ฮ ฮฑ โ t} {ฯ `โ ฯโ} โจ โ , rec           โฉ = ABS (toโข rec)
  toโข {t = t โ tโ } {ฯ      } โจ โ , _ , jdโ , jdโ โฉ = APP (toโข jdโ) (toโข jdโ)

  โข-isoโ : โ {ฮ : Ctx} {t : Tm} {ฯ : Ty} {jd : ฮ โข t โถ ฯ} โ toโข (fromโข jd) โก jd
  โข-isoโ {jd = VAR _  } = refl
  โข-isoโ {jd = ABS _  } = cong ABS โข-isoโ
  โข-isoโ {jd = APP _ _} = congโ APP โข-isoโ โข-isoโ

  โข-isoโ : โ {ฮ : Ctx} {t : Tm} {ฯ : Ty} {jd : ฮ โข' t โถ ฯ} โ fromโข (toโข jd) โก jd
  โข-isoโ {t = $ ฮฑ    } {ฯ      } {โจ โ , _ , lift tt โฉ  } = refl
  โข-isoโ {t = ฮ ฮฑ โ t} {ฯ `โ ฯโ} {โจ โ , jd โฉ           } =
    cong (ฮป x โ โจ (โ , x) โฉ) โข-isoโ
  โข-isoโ {t = t โ tโ } {ฯ      } {โจ โ , ฯ , jdโ , jdโ โฉ} =
    congโ (ฮป x y โ โจ (โ , ฯ , (x , y)) โฉ) โข-isoโ โข-isoโ

