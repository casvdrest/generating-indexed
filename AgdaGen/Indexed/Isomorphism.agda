{-# OPTIONS --type-in-type #-}

open import AgdaGen.Indexed.Signature
open import AgdaGen.Base
open import AgdaGen.Regular.Isomorphism 
open import AgdaGen.Regular.Generic
open import AgdaGen.Indexed.Generic
open import AgdaGen.Regular.Cogen
open import AgdaGen.Indexed.PiGen

open import Data.Empty
open import Data.Nat
open import Data.Sum
open import Data.Product
open import Data.Unit hiding (_‚â§_)
open import Data.Fin using (Fin; suc; zero)
open import Data.List using (List; []; _‚à∑_)
open import Data.Vec using (Vec; []; _‚à∑_)

open import Category.Applicative

open import Function

open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; cong; sym)

module AgdaGen.Indexed.Isomorphism where

  open RawApplicative ‚¶É...‚¶Ñ using (_‚äõ_; pure)

  triv : (a : Set) ‚Üí ‚ä§ ‚Üí Set
  triv a tt = a

  record MultiSorted {i : Set} (a : i ‚Üí Set) : Set where
    field
      W·µ¢ : Œ£[ Œ£ ‚àà Sig i ] (‚àÄ {x : i} ‚Üí a x ‚âÖ Fix‚Çõ Œ£ x)

  getŒ£ : ‚àÄ {i : Set} {a : i ‚Üí Set} ‚Üí MultiSorted a ‚Üí Sig i
  getŒ£ (record { W·µ¢ = Œ£ , _ }) = Œ£

  isoGen·µ¢ : ‚àÄ {i : Set} {a : i ‚Üí Set} ‚Üí ‚¶É p : MultiSorted a ‚¶Ñ
           ‚Üí ((x : i) ‚Üí RegInfo (Œª op ‚Üí ùîæ op √ó Œ†ùîæ op) (Sig.Op (getŒ£ p) x))
           ‚Üí ((x : i) ‚Üí (op : Fix (Sig.Op (getŒ£ p) x))
                 ‚Üí RegInfo (Œª op ‚Üí ùîæ op √ó Œ†ùîæ op) (Sig.Ar (getŒ£ p) op)) ‚Üí ùîæ·µ¢ a
  isoGen·µ¢ ‚¶É p = record { W·µ¢ = Œ£ , iso } ‚¶Ñ sig‚ÇÅ sig‚ÇÇ x =
    ‚¶á (_‚âÖ_.to iso ‚àò In‚Çõ) (` deriveGen·µ¢ sig‚ÇÅ sig‚ÇÇ x) ‚¶à 
      
   -- Function exensionality
  postulate funext : ‚àÄ {a b : Set} {f g : a ‚Üí b} ‚Üí (‚àÄ {x} ‚Üí f x ‚â° g x) ‚Üí f ‚â° g

  -- Variation on function extensionality for dependent functions (Œ†-types). 
  postulate funext' : ‚àÄ {a : Set} {b : a ‚Üí Set} {f g : Œ† a b} ‚Üí (‚àÄ {x} ‚Üí f x ‚â° g x) ‚Üí f ‚â° g 

  -- Functions with an empty domain are, by function extensionality,
  -- allways equal (provided that they have the same codomain)
  ‚ä•-funeq : ‚àÄ {‚Ñì} {b : Set ‚Ñì} {f g : ‚ä• ‚Üí b} ‚Üí f ‚â° g
  ‚ä•-funeq = funext Œª { {()} }

  Fix-‚ä•-eq : ‚àÄ {b : Fix Z ‚Üí Set} {f g : Œ† (Fix Z) b} ‚Üí f ‚â° g
  Fix-‚ä•-eq = funext' Œª { {In ()} }

  cong‚ÇÇ : ‚àÄ {a b c : Set} {x‚ÇÅ x‚ÇÇ : a} {y‚ÇÅ y‚ÇÇ : b} ‚Üí (f : a ‚Üí b ‚Üí c) ‚Üí x‚ÇÅ ‚â° x‚ÇÇ ‚Üí y‚ÇÅ ‚â° y‚ÇÇ ‚Üí f x‚ÇÅ y‚ÇÅ ‚â° f x‚ÇÇ y‚ÇÇ 
  cong‚ÇÇ f refl refl = refl
  
   ------ Naturals ------

  from‚Ñï : ‚Ñï ‚Üí Fix‚Çõ Œ£-nat tt
  from‚Ñï zero =
    In‚Çõ (In (inj‚ÇÅ tt) , Œª { (In ()) })
  from‚Ñï (suc n) =
    In‚Çõ (In (inj‚ÇÇ tt) , (Œª { (In tt) ‚Üí from‚Ñï n }))

  to‚Ñï : Fix‚Çõ Œ£-nat tt ‚Üí ‚Ñï
  to‚Ñï (In‚Çõ (In (inj‚ÇÅ tt) , _)) = zero
  to‚Ñï (In‚Çõ (In (inj‚ÇÇ tt) , snd)) =
    suc (to‚Ñï (snd (In tt)))

  ‚Ñï-iso‚ÇÅ : ‚àÄ {n : ‚Ñï} ‚Üí to‚Ñï (from‚Ñï n) ‚â° n
  ‚Ñï-iso‚ÇÅ {zero} = refl
  ‚Ñï-iso‚ÇÅ {suc n} =
    cong suc ‚Ñï-iso‚ÇÅ

  ‚Ñï-iso‚ÇÇ : ‚àÄ {n : Fix‚Çõ Œ£-nat tt} ‚Üí from‚Ñï (to‚Ñï n) ‚â° n
  ‚Ñï-iso‚ÇÇ {In‚Çõ (In (inj‚ÇÅ tt) , snd)} =
    cong (Œª x ‚Üí In‚Çõ ((In (inj‚ÇÅ tt)) , x)) (funext Œª { {In ()} })
  ‚Ñï-iso‚ÇÇ {In‚Çõ (In (inj‚ÇÇ tt) , snd)} =
    cong (Œª x ‚Üí In‚Çõ ((In (inj‚ÇÇ tt)) , x)) (funext Œª { {In tt} ‚Üí ‚Ñï-iso‚ÇÇ })

  ‚Ñï‚âÖŒ£-nat : ‚Ñï ‚âÖ Fix‚Çõ Œ£-nat tt
  ‚Ñï‚âÖŒ£-nat =
    record { from = from‚Ñï
           ; to   = to‚Ñï
           ; iso‚ÇÅ = ‚Ñï-iso‚ÇÅ
           ; iso‚ÇÇ = ‚Ñï-iso‚ÇÇ
           }

  instance
    ‚Ñï-MultiSorted : MultiSorted (triv ‚Ñï)
    ‚Ñï-MultiSorted = record { W·µ¢ = Œ£-nat , ‚Ñï‚âÖŒ£-nat }
  
  ------ Finite Sets ------

  fromFin : ‚àÄ {n : ‚Ñï} ‚Üí Fin n ‚Üí Fix‚Çõ Œ£-fin n
  fromFin zero =
    In‚Çõ (In (inj‚ÇÅ tt) , Œª { (In ()) })
  fromFin (suc f) =
    In‚Çõ (In (inj‚ÇÇ tt) , Œª { (In tt) ‚Üí fromFin f})
  
  toFin : ‚àÄ {n : ‚Ñï} ‚Üí Fix‚Çõ Œ£-fin n ‚Üí Fin n
  toFin {zero} (In‚Çõ (In () , snd))
  toFin {suc n} (In‚Çõ (In (inj‚ÇÅ tt) , snd)) = zero
  toFin {suc n} (In‚Çõ (In (inj‚ÇÇ tt) , snd)) = suc (toFin (snd (In tt)))

  
  Fin-iso‚ÇÅ : ‚àÄ {n : ‚Ñï} {f : Fin n} ‚Üí toFin (fromFin f) ‚â° f
  Fin-iso‚ÇÅ {zero} {()}
  Fin-iso‚ÇÅ {suc n} {zero} = refl
  Fin-iso‚ÇÅ {suc n} {suc f} =
    cong suc Fin-iso‚ÇÅ
  
  Fin-iso‚ÇÇ : ‚àÄ {n : ‚Ñï} {f : Fix‚Çõ Œ£-fin n} ‚Üí fromFin (toFin f) ‚â° f
  Fin-iso‚ÇÇ {zero} {In‚Çõ (In () , snd)}
  Fin-iso‚ÇÇ {suc n} {In‚Çõ (In (inj‚ÇÅ tt) , snd)} =
    cong (Œª x ‚Üí In‚Çõ (In (inj‚ÇÅ tt) , x)) (funext' Œª { {In ()} })
  Fin-iso‚ÇÇ {suc n} {In‚Çõ (In (inj‚ÇÇ tt) , snd)} =
    cong (Œª x ‚Üí In‚Çõ (In (inj‚ÇÇ tt) , x)) (funext' Œª { {In tt} ‚Üí Fin-iso‚ÇÇ })

  
  Fin‚âÖŒ£-fin : ‚àÄ {n : ‚Ñï} ‚Üí Fin n ‚âÖ Fix‚Çõ Œ£-fin n
  Fin‚âÖŒ£-fin =
    record { from = fromFin
           ; to   = toFin
           ; iso‚ÇÅ = Fin-iso‚ÇÅ
           ; iso‚ÇÇ = Fin-iso‚ÇÇ 
           }

  instance
    Fin-MultiSorted : MultiSorted Fin
    Fin-MultiSorted = record { W·µ¢ = Œ£-fin , Fin‚âÖŒ£-fin }

  ------ Well-Scoped Lambda Terms ------
  
  fromTerm : ‚àÄ {n : ‚Ñï} ‚Üí Term n ‚Üí Fix‚Çõ Œ£-Term n
  fromTerm {zero} (Abs t) =
    In‚Çõ (In (inj‚ÇÅ tt) , Œª { (In tt) ‚Üí fromTerm t })
  fromTerm {zero} (App t t‚ÇÅ) =
    In‚Çõ (In (inj‚ÇÇ tt) , Œª { (In (inj‚ÇÅ tt))
      ‚Üí fromTerm t ; (In (inj‚ÇÇ tt)) ‚Üí fromTerm t‚ÇÅ })
  fromTerm {zero} (Var ())
  fromTerm {suc n} (Abs t) =
    In‚Çõ ((In (inj‚ÇÅ tt)) , Œª { (In tt) ‚Üí fromTerm t })
  fromTerm {suc n} (App t t‚ÇÅ) =
    In‚Çõ (In (inj‚ÇÇ (inj‚ÇÅ tt)) , (Œª { (In (inj‚ÇÅ tt))
      ‚Üí fromTerm t ; (In (inj‚ÇÇ tt)) ‚Üí fromTerm t‚ÇÅ }))
  fromTerm {suc n} (Var x) =
    In‚Çõ (In (inj‚ÇÇ (inj‚ÇÇ x)) , Œª { (In ()) })

  
  toTerm : ‚àÄ {n : ‚Ñï} ‚Üí Fix‚Çõ Œ£-Term n ‚Üí Term n
  toTerm {zero} (In‚Çõ (In (inj‚ÇÅ tt) , snd)) =
    Abs (toTerm (snd (In tt)))
  toTerm {zero} (In‚Çõ (In (inj‚ÇÇ tt) , snd)) =
    App (toTerm (snd (In (inj‚ÇÅ tt)))) (toTerm (snd (In (inj‚ÇÇ tt))))
  toTerm {suc n} (In‚Çõ (In (inj‚ÇÅ tt) , snd)) =
    Abs (toTerm (snd (In tt)))
  toTerm {suc n} (In‚Çõ (In (inj‚ÇÇ (inj‚ÇÅ tt)) , snd)) =
    App (toTerm (snd (In (inj‚ÇÅ tt)))) (toTerm (snd (In (inj‚ÇÇ tt))))
  toTerm {suc n} (In‚Çõ (In (inj‚ÇÇ (inj‚ÇÇ y)) , snd)) =
    Var y 
  
  Term-iso‚ÇÅ : ‚àÄ {n : ‚Ñï} {t : Term n} ‚Üí toTerm (fromTerm t) ‚â° t
  Term-iso‚ÇÅ {zero} {Abs t} =
    cong Abs Term-iso‚ÇÅ
  Term-iso‚ÇÅ {zero} {App t‚ÇÅ t‚ÇÇ} =
    cong (uncurry App) (cong‚ÇÇ _,_ Term-iso‚ÇÅ Term-iso‚ÇÅ) 
  Term-iso‚ÇÅ {zero} {Var ()}
  Term-iso‚ÇÅ {suc n} {Abs t} =
    cong Abs Term-iso‚ÇÅ
  Term-iso‚ÇÅ {suc n} {App t t‚ÇÅ} =
    cong (uncurry App) (cong‚ÇÇ _,_ Term-iso‚ÇÅ Term-iso‚ÇÅ)
  Term-iso‚ÇÅ {suc n} {Var x} = refl
  
  Term-iso‚ÇÇ : ‚àÄ {n : ‚Ñï} {t : Fix‚Çõ Œ£-Term n} ‚Üí fromTerm (toTerm t) ‚â° t
  Term-iso‚ÇÇ {zero} {In‚Çõ (In (inj‚ÇÅ tt) , snd)} =
    cong (Œª x ‚Üí In‚Çõ ((In (inj‚ÇÅ tt)) , x)) (funext' Œª { {In tt} ‚Üí Term-iso‚ÇÇ})
  Term-iso‚ÇÇ {zero} {In‚Çõ (In (inj‚ÇÇ tt) , snd)} =
    cong (Œª x ‚Üí In‚Çõ (In (inj‚ÇÇ tt) , x))
      (funext' Œª {
        {In (inj‚ÇÅ tt)} ‚Üí Term-iso‚ÇÇ
      ; {In (inj‚ÇÇ tt)} ‚Üí Term-iso‚ÇÇ
      })
  Term-iso‚ÇÇ {suc n} {In‚Çõ (In (inj‚ÇÅ tt) , snd)} =
    cong (Œª x ‚Üí In‚Çõ ((In (inj‚ÇÅ tt)) , x)) (funext' Œª { {In tt} ‚Üí Term-iso‚ÇÇ })
  Term-iso‚ÇÇ {suc n} {In‚Çõ (In (inj‚ÇÇ (inj‚ÇÅ tt)) , snd)} =
    cong (Œª x ‚Üí In‚Çõ ((In (inj‚ÇÇ (inj‚ÇÅ tt))) , x))
      (funext' Œª {
        {In (inj‚ÇÅ tt)} ‚Üí Term-iso‚ÇÇ
      ; {In (inj‚ÇÇ tt)} ‚Üí Term-iso‚ÇÇ
      })
  Term-iso‚ÇÇ {suc n} {In‚Çõ (In (inj‚ÇÇ (inj‚ÇÇ y)) , snd)} =
    cong (Œª x ‚Üí In‚Çõ (In (inj‚ÇÇ (inj‚ÇÇ y)) , x)) (funext' Œª { {In ()} })

  
  Term‚âÖŒ£-Term : ‚àÄ {n : ‚Ñï} ‚Üí Term n ‚âÖ Fix‚Çõ Œ£-Term n
  Term‚âÖŒ£-Term =
    record { from = fromTerm
           ; to   = toTerm
           ; iso‚ÇÅ = Term-iso‚ÇÅ
           ; iso‚ÇÇ = Term-iso‚ÇÇ
           }

  instance
    Term-MultiSorted : MultiSorted Term
    Term-MultiSorted = record { W·µ¢ = Œ£-Term , Term‚âÖŒ£-Term }

  ------ Lists ------

  fromList : ‚àÄ {a : Set} ‚Üí List a ‚Üí Fix‚Çõ (Œ£-list a) tt
  fromList [] =
    In‚Çõ (In (inj‚ÇÅ tt) , Œª { (In ()) })
  fromList (x ‚à∑ xs) =
    In‚Çõ (In (inj‚ÇÇ x) , Œª { (In tt) ‚Üí fromList xs})

  toList : ‚àÄ {a : Set} ‚Üí Fix‚Çõ ((Œ£-list a)) tt ‚Üí List a
  toList (In‚Çõ (In (inj‚ÇÅ tt) , snd)) = []
  toList (In‚Çõ (In (inj‚ÇÇ y) , snd)) =
    y ‚à∑ toList (snd (In tt))
  
  List-iso‚ÇÅ : ‚àÄ {a : Set} {xs : List a} ‚Üí toList (fromList xs) ‚â° xs
  List-iso‚ÇÅ {xs = []} = refl
  List-iso‚ÇÅ {xs = x ‚à∑ xs} =
    cong (_‚à∑_ x) List-iso‚ÇÅ
  
  List-iso‚ÇÇ : ‚àÄ {a : Set} {xs : Fix‚Çõ (Œ£-list a) tt } ‚Üí fromList (toList xs) ‚â° xs
  List-iso‚ÇÇ {a} {In‚Çõ (In (inj‚ÇÅ tt) , snd)} =
    cong (Œª x ‚Üí In‚Çõ ((In (inj‚ÇÅ tt)) , x)) (funext Œª { {In ()} })
  List-iso‚ÇÇ {a} {In‚Çõ (In (inj‚ÇÇ y) , snd)} =
    cong (Œª x ‚Üí In‚Çõ ((In (inj‚ÇÇ y)) , x)) (funext Œª { {In tt} ‚Üí List-iso‚ÇÇ} )

  List‚âÖŒ£-list : ‚àÄ {a : Set} ‚Üí List a ‚âÖ Fix‚Çõ (Œ£-list a) tt
  List‚âÖŒ£-list =
    record { from = fromList
           ; to   = toList
           ; iso‚ÇÅ = List-iso‚ÇÅ
           ; iso‚ÇÇ = List-iso‚ÇÇ
           }

  instance
    List-MultiSorted : ‚àÄ {a : Set} ‚Üí MultiSorted (triv (List a))
    List-MultiSorted {a} = record { W·µ¢ = Œ£-list a , List‚âÖŒ£-list }

  ------ Vectors ------

  fromVec : ‚àÄ {a : Set} {n : ‚Ñï} ‚Üí Vec a n ‚Üí Fix‚Çõ (Œ£-vec a) n
  fromVec {n = 0}     []       =
    In‚Çõ (In tt , Œª { (In ()) })
  fromVec {n = suc n} (x ‚à∑ xs) =
    In‚Çõ (In x , Œª { (In tt) ‚Üí fromVec xs })

  toVec : ‚àÄ {a : Set} {n : ‚Ñï} ‚Üí Fix‚Çõ (Œ£-vec a) n ‚Üí Vec a n
  toVec {n = zero} (In‚Çõ (In tt , snd)) = []
  toVec {n = suc n} (In‚Çõ (In x , snd)) =
    x ‚à∑ toVec (snd (In tt))

  
  Vec-iso‚ÇÅ : ‚àÄ {a : Set} {n : ‚Ñï} {xs : Vec a n} ‚Üí toVec (fromVec xs) ‚â° xs
  Vec-iso‚ÇÅ {xs = []} = refl
  Vec-iso‚ÇÅ {xs = x ‚à∑ xs} =
    cong (_‚à∑_ x) Vec-iso‚ÇÅ
  
  Vec-iso‚ÇÇ : ‚àÄ {a : Set} {n : ‚Ñï} {xs : Fix‚Çõ (Œ£-vec a) n} ‚Üí fromVec (toVec xs) ‚â° xs
  Vec-iso‚ÇÇ {n = zero} {In‚Çõ (In tt , snd)} =
    cong (Œª x ‚Üí In‚Çõ ((In tt) , x)) (funext' Œª { {In ()} })
  Vec-iso‚ÇÇ {n = suc n} {In‚Çõ (In y , snd)} =
    cong (Œª x ‚Üí In‚Çõ ((In y) , x)) (funext' Œª { {In tt} ‚Üí Vec-iso‚ÇÇ})

  Vec‚âÖŒ£-vec : ‚àÄ {a : Set} {n : ‚Ñï} ‚Üí Vec a n ‚âÖ Fix‚Çõ (Œ£-vec a) n
  Vec‚âÖŒ£-vec =
    record { from = fromVec
           ; to   = toVec
           ; iso‚ÇÅ = Vec-iso‚ÇÅ
           ; iso‚ÇÇ = Vec-iso‚ÇÇ
           }

  instance
    Vec-MultiSorted : ‚àÄ {a : Set} ‚Üí MultiSorted (Vec a)
    Vec-MultiSorted {a} = record { W·µ¢ = Œ£-vec a , Vec‚âÖŒ£-vec }

  ------ LEQ ------
  
  from‚â§ : ‚àÄ {idx : ‚Ñï √ó ‚Ñï} ‚Üí (proj‚ÇÅ idx) ‚â§ (proj‚ÇÇ idx) ‚Üí Fix‚Çõ Œ£-‚â§ idx 
  from‚â§ z‚â§n = In‚Çõ (In tt , Œª { (In ()) })
  from‚â§ (s‚â§s p) =
    In‚Çõ (In tt , Œª { (In tt) ‚Üí from‚â§ p })
  
  to‚â§ : ‚àÄ {idx : ‚Ñï √ó ‚Ñï} ‚Üí Fix‚Çõ Œ£-‚â§ idx ‚Üí proj‚ÇÅ idx ‚â§ proj‚ÇÇ idx
  to‚â§ {zero , snd‚ÇÅ} (In‚Çõ (In tt , snd)) = z‚â§n
  to‚â§ {suc fst , zero} (In‚Çõ (In () , snd))
  to‚â§ {suc fst , suc snd‚ÇÅ} (In‚Çõ (In x , snd)) =
    s‚â§s (to‚â§ (snd (In x)))
  
  ‚â§-iso‚ÇÅ : ‚àÄ {idx : ‚Ñï √ó ‚Ñï} {p : proj‚ÇÅ idx ‚â§ proj‚ÇÇ idx} ‚Üí to‚â§ (from‚â§ p) ‚â° p
  ‚â§-iso‚ÇÅ {.0 , snd} {z‚â§n} = refl
  ‚â§-iso‚ÇÅ {.(suc _) , .(suc _)} {s‚â§s p} = cong s‚â§s ‚â§-iso‚ÇÅ


  ‚â§-iso‚ÇÇ : ‚àÄ {idx : ‚Ñï √ó ‚Ñï} {p : Fix‚Çõ Œ£-‚â§ idx} ‚Üí from‚â§ (to‚â§ p) ‚â° p
  ‚â§-iso‚ÇÇ {zero , m} {In‚Çõ (In tt , snd‚ÇÅ)} = cong (Œª x ‚Üí In‚Çõ ((In tt) , x)) (funext' Œª { {In ()} })
  ‚â§-iso‚ÇÇ {suc n , zero} {In‚Çõ (In () , snd)}
  ‚â§-iso‚ÇÇ {suc n , suc m} {In‚Çõ (In tt , snd)} = cong (Œª x ‚Üí In‚Çõ (In tt , x)) (funext' Œª { {In tt} ‚Üí ‚â§-iso‚ÇÇ })

  ‚â§‚âÖŒ£-‚â§ : ‚àÄ {idx : ‚Ñï √ó ‚Ñï} ‚Üí (proj‚ÇÅ idx ‚â§ proj‚ÇÇ idx) ‚âÖ Fix‚Çõ Œ£-‚â§ idx
  ‚â§‚âÖŒ£-‚â§ =
    record { from = from‚â§
           ; to   = to‚â§
           ; iso‚ÇÅ = ‚â§-iso‚ÇÅ
           ; iso‚ÇÇ = ‚â§-iso‚ÇÇ
           }

  instance
    ‚â§-MultiSorted : MultiSorted (uncurry _‚â§_)
    ‚â§-MultiSorted = record { W·µ¢ = Œ£-‚â§ , ‚â§‚âÖŒ£-‚â§ }

  ------ Sorted ------

  fromSorted : ‚àÄ {xs : List ‚Ñï} ‚Üí Sorted xs ‚Üí Fix‚Çõ Œ£-Sorted xs
  fromSorted nil = In‚Çõ (In tt , Œª { (In ()) })
  fromSorted single =
    In‚Çõ (In tt , Œª { (In ()) })
  fromSorted (step' x‚ÇÅ p) =
    In‚Çõ (In x‚ÇÅ , Œª { (In tt) ‚Üí fromSorted p } )

  toSorted : ‚àÄ {xs : List ‚Ñï} ‚Üí Fix‚Çõ Œ£-Sorted xs ‚Üí Sorted xs
  toSorted {[]} (In‚Çõ (In tt , snd)) = nil
  toSorted {x ‚à∑ []} (In‚Çõ (In tt , snd)) = single
  toSorted {x ‚à∑ x‚ÇÅ ‚à∑ xs} (In‚Çõ ((In fst) , snd)) =
    step' fst (toSorted (snd (In tt)))


  Sorted-iso‚ÇÅ : ‚àÄ {xs : List ‚Ñï} {p : Sorted xs} ‚Üí toSorted (fromSorted p) ‚â° p
  Sorted-iso‚ÇÅ {[]} {nil} = refl
  Sorted-iso‚ÇÅ {x ‚à∑ []} {single} = refl
  Sorted-iso‚ÇÅ {x ‚à∑ x‚ÇÅ ‚à∑ xs} {step' x‚ÇÇ p} =
    cong (step' x‚ÇÇ) Sorted-iso‚ÇÅ


  Sorted-iso‚ÇÇ : ‚àÄ {xs : List ‚Ñï} {p : Fix‚Çõ Œ£-Sorted xs} ‚Üí fromSorted (toSorted p) ‚â° p
  Sorted-iso‚ÇÇ {[]} {In‚Çõ (In tt , snd)} =
    cong (Œª x ‚Üí In‚Çõ ((In tt) , x)) (funext' Œª { {In ()} })
  Sorted-iso‚ÇÇ {x ‚à∑ []} {In‚Çõ (In tt , snd)} =
    cong (Œª v ‚Üí In‚Çõ ((In tt) , v)) (funext' Œª { {In ()} })
  Sorted-iso‚ÇÇ {x ‚à∑ x‚ÇÅ ‚à∑ xs} {In‚Çõ (In prf , snd)} =
    cong (Œª x ‚Üí In‚Çõ ((In prf) , x)) (funext' Œª { {In tt} ‚Üí Sorted-iso‚ÇÇ })

  Sorted‚âÖŒ£-Sorted : ‚àÄ {xs : List ‚Ñï} ‚Üí Sorted xs ‚âÖ Fix‚Çõ Œ£-Sorted xs
  Sorted‚âÖŒ£-Sorted =
    record { from = fromSorted
           ; to   = toSorted
           ; iso‚ÇÅ = Sorted-iso‚ÇÅ
           ; iso‚ÇÇ = Sorted-iso‚ÇÇ
           }

  instance
    Sorted-MultiSorted : MultiSorted Sorted
    Sorted-MultiSorted = record { W·µ¢ = Œ£-Sorted , Sorted‚âÖŒ£-Sorted }
                           
  ------ Perfect Trees -----

  fromPerfect : ‚àÄ {a : Set} {n : ‚Ñï} ‚Üí Perfect a n ‚Üí Fix‚Çõ (Œ£-Perfect {a}) n
  fromPerfect {a} {zero} p =
    In‚Çõ ((In tt) , Œª { (In ()) })
  fromPerfect {a} {suc n} (Node x p‚Çó p·µ£) =
    In‚Çõ ((In x) , (Œª { (In (inj‚ÇÅ x))
      ‚Üí fromPerfect p‚Çó ; (In (inj‚ÇÇ y)) ‚Üí fromPerfect p·µ£ })
    )

  toPerfect : ‚àÄ {a : Set} {n : ‚Ñï} ‚Üí Fix‚Çõ (Œ£-Perfect {a}) n ‚Üí Perfect a n
  toPerfect {n = zero} (In‚Çõ (In tt , snd)) = Leaf
  toPerfect {n = suc n} (In‚Çõ (In x , snd)) =
    Node x (toPerfect (snd (In (inj‚ÇÅ tt)))) (toPerfect (snd (In (inj‚ÇÇ tt))))

  Perfect-iso‚ÇÅ : ‚àÄ {a : Set} {n : ‚Ñï} {p : Perfect a n} ‚Üí toPerfect (fromPerfect p) ‚â° p
  Perfect-iso‚ÇÅ {n = zero} {Leaf} = refl
  Perfect-iso‚ÇÅ {n = suc n} {Node x pl pr} =
    cong‚ÇÇ (Node x) Perfect-iso‚ÇÅ Perfect-iso‚ÇÅ

  Perfect-iso‚ÇÇ : ‚àÄ {a : Set} {n : ‚Ñï} {p : Fix‚Çõ (Œ£-Perfect {a}) n} ‚Üí fromPerfect (toPerfect p) ‚â° p
  Perfect-iso‚ÇÇ {n = zero} {In‚Çõ (In tt , snd)} =
    cong (Œª x ‚Üí In‚Çõ ((In tt) , x)) (funext' Œª { {In ()} })
  Perfect-iso‚ÇÇ {n = suc n} {In‚Çõ (In v , snd)} =
    cong (Œª x ‚Üí In‚Çõ ((In v) , x)) ( funext' Œª {
        {In (inj‚ÇÅ tt)} ‚Üí Perfect-iso‚ÇÇ
      ; {In (inj‚ÇÇ tt)} ‚Üí Perfect-iso‚ÇÇ
      })

  Perfect‚âÖŒ£-Perfect : ‚àÄ {a : Set} {n : ‚Ñï} ‚Üí Perfect a n ‚âÖ Fix‚Çõ (Œ£-Perfect {a}) n
  Perfect‚âÖŒ£-Perfect =
    record { from = fromPerfect
           ; to   = toPerfect
           ; iso‚ÇÅ = Perfect-iso‚ÇÅ
           ; iso‚ÇÇ = Perfect-iso‚ÇÇ
           }

  instance
    Perfect-MultiSorted : ‚àÄ {a : Set} ‚Üí MultiSorted (Perfect a)
    Perfect-MultiSorted {a} = record { W·µ¢ = Œ£-Perfect {a} , Perfect‚âÖŒ£-Perfect }
