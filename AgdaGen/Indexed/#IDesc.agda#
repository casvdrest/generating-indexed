open import Data.Unit
open import Data.Product
open import Data.Sum
open import Data.Nat
open import Data.Bool

module AgdaGen.Indexed.IDesc where

  data IDesc (i : Set) : Set₁ where
    var  : (x : i) → IDesc i
    unit : IDesc i
    _×ᵢ_ : IDesc i → IDesc i → IDesc i
    Σᵢ    : (s : Set) → (s → IDesc i) → IDesc i
    Πᵢ    : (s : Set) → (s → IDesc i) → IDesc i

  ⟦_⟧ : ∀ {i : Set} → IDesc i → (i → Set) → Set
  ⟦ var x  ⟧ r = r x
  ⟦ unit   ⟧ r = ⊤
  ⟦ a ×ᵢ b ⟧ r = ⟦ a ⟧ r × ⟦ b ⟧ r 
  ⟦ Σᵢ s P ⟧ r = (x : s) → ⟦ P x ⟧ r
  ⟦ Πᵢ s P ⟧ r = Σ[ x ∈ s ] ⟦ P x ⟧ r
  
  func : Set → Set → Set₁
  func i j = j → IDesc i

  ⟦_⟧𝔣 : ∀ {i j : Set} → func i j → (i → Set) → j → Set
  ⟦ d ⟧𝔣 r = λ j → ⟦ d j ⟧ r

  VecD : Set → func ℕ ℕ
  VecD a zero = unit
  VecD a (suc n) = Σᵢ a λ _ → var n ×ᵢ unit

  data Fix {i : Set} (d : func i i) : i → Set where
    In : ∀ {x : i} → ⟦ d ⟧𝔣 (Fix d) x → Fix d x

  data Ty : Set where
    `nat  : Ty
    `bool : Ty

  Val : Ty → Set
  Val `nat = ℕ
  Val `bool = Bool

  _<=_ : ℕ → ℕ → Bool
  zero <= m = true
  suc n <= zero = false
  suc n <= suc m = n <= m

  
