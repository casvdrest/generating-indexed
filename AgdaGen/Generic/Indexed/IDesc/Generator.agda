open import AgdaGen.Base renaming (Œº to ŒºBase; ‚ü®_‚ü© to ‚ü®_‚ü©Base)
open import AgdaGen.Combinators

open import AgdaGen.Generic.Indexed.IDesc.Universe
open import AgdaGen.Generic.Indexed.IDesc.Instances

open import Data.Unit
open import Data.Product
open import Data.Nat

open import Level renaming (suc to sucL ; zero to zeroL)

module AgdaGen.Generic.Indexed.IDesc.Generator where

  Sl-gen : ‚àÄ {‚Ñì} ‚Üí ùîæ·µ¢ {‚Ñì = ‚Ñì} Sl
  Sl-gen zero    = None
  Sl-gen (suc n) = ‚¶á ‚ñª_ (` Sl-gen n) ‚¶à ‚à• ‚¶á ‚àô ‚¶à

  IDesc-gen :
    ‚àÄ {‚Ñì} {I : Set} {d‚ÇÅ : IDesc ‚Ñì I} {d‚ÇÇ : I ‚Üí IDesc ‚Ñì I}
    ‚Üí (x : I) ‚Üí Gen (‚ü¶ d‚ÇÅ ‚üß (Œº (mk d‚ÇÇ))) (‚ü¶ d‚ÇÇ x ‚üß (Œº (mk d‚ÇÇ)))
  IDesc-gen {d‚ÇÅ = `var i} {d‚ÇÇ} x = {!!}
  IDesc-gen {d‚ÇÅ = `1} {d‚ÇÇ} x = ‚¶á (lift tt) ‚¶à
  IDesc-gen {d‚ÇÅ = d‚Çó `√ó d·µ£} {d‚ÇÇ} x =
    ‚¶á (IDesc-gen {d‚ÇÅ = d‚Çó}  x) , (IDesc-gen {d‚ÇÅ = d·µ£} x) ‚¶à
  IDesc-gen {d‚ÇÅ = `œÉ n T} {d‚ÇÇ} x =
    do sl ‚Üê ` Sl-gen n
       r  ‚Üê IDesc-gen {d‚ÇÅ = T sl} {d‚ÇÇ = d‚ÇÇ} x
       pure (sl , r)
  IDesc-gen {d‚ÇÅ = `Œ£ S T} {d‚ÇÇ} x = {!!}
