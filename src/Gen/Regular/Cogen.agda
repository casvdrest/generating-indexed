open import src.Gen.Base
open import src.Gen.Regular.Generic

open import Data.Nat
open import Data.Product
open import Data.Sum
open import Data.List
open import Data.Bool
open import Data.Maybe
open import Data.Unit

open import Relation.Binary.PropositionalEquality

open import Function

open import Category.Monad

module src.Gen.Regular.Cogen where

  open RawMonad โฆ...โฆ using (_โ_; pure; _>>=_; return)

  U-Cogen : โ {f : Reg} {a : Set} โ Gen a a โ ๐พ (โฆ U โง (Fix f) โ a) 
  U-Cogen gen = โฆ (ฮป x โ ฮป { tt โ x }) (` gen) โฆ

  โ-Cogen :
    โ {fโ fโ g : Reg} {a : Set}
    โ (๐พ a โ ๐พ (โฆ fโ โง (Fix g) โ a))
    โ (๐พ a โ ๐พ (โฆ fโ โง (Fix g) โ a))
    โ ๐พ a โ ๐พ (โฆ fโ โ fโ โง (Fix g) โ a )
  โ-Cogen cgโ cgโ gโ =
    โฆ (ฮป fโ fโ โ ฮป { (injโ x) โ fโ x ; (injโ y) โ fโ y })
      (` (cgโ gโ)) (` cgโ gโ) โฆ

  โ-Cogen :
    โ {fโ fโ g : Reg} {a : Set}
    โ (โ {a : Set} โ ๐พ a โ ๐พ (โฆ fโ โง (Fix g) โ a))
    โ (โ {a : Set} โ ๐พ a โ ๐พ (โฆ fโ โง (Fix g) โ a))
    โ ๐พ a โ ๐พ (โฆ fโ โ fโ โง (Fix g) โ a)
  โ-Cogen cgโ cgโ gโ = โฆ uncurry (` cgโ (cgโ gโ)) โฆ 
 
  deriveCogen :
    โ {f g : Reg} โ RegInfo co๐พ f โ co๐พ (โฆ f โง (Fix g))
  deriveCogen {U} {g} info gโ = U-Cogen {f = g} gโ
  deriveCogen {fโ โ fโ} {g} (iโ โ~ iแตฃ) = 
    โ-Cogen {fโ} {fโ} (deriveCogen iโ ) (deriveCogen iแตฃ )
  deriveCogen {fโ โ fโ} {g} (iโ โ~ iแตฃ) =
    โ-Cogen {fโ} {fโ} {g} (deriveCogen iโ) (deriveCogen iแตฃ)
  deriveCogen {I} I~ _ = ฮผ 
  deriveCogen {K x} {g} (K~ cg) = cg
  deriveCogen {Z} Z~ = ฮป _ โ Pure ฮป()
  

