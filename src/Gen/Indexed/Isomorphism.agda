{-# OPTIONS --type-in-type #-}

open import src.Gen.Indexed.Signature
open import src.Gen.Base
open import src.Gen.Regular.Isomorphism using (_‚âÖ_)

open import Data.Empty
open import Data.Nat
open import Data.Sum
open import Data.Product
open import Data.Unit hiding (_‚â§_)
open import Data.Fin using (Fin; suc; zero)
open import Data.List using (List; []; _‚à∑_)
open import Data.Vec using (Vec; []; _‚à∑_)

open import Category.Applicative

open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; cong)

module src.Gen.Indexed.Isomorphism where

  open RawApplicative ‚¶É...‚¶Ñ using (_‚äõ_; pure)

   -- Function exensionality
  postulate funext : ‚àÄ {‚Ñì} {a b : Set ‚Ñì} {f g : a ‚Üí b} ‚Üí (‚àÄ {x} ‚Üí f x ‚â° g x) ‚Üí f ‚â° g

  -- Variation on function extensionality for dependent functions (Œ†-types). 
  postulate funext' : ‚àÄ {‚Ñì} {a : Set ‚Ñì} {b : a ‚Üí Set ‚Ñì} {f g : Œ† a b} ‚Üí (‚àÄ {x} ‚Üí f x ‚â° g x) ‚Üí f ‚â° g 

  -- Functions with an empty domain are, by function extensionality,
  -- allways equal (provided that they have the same codomain)
  ‚ä•-funeq : ‚àÄ {‚Ñì} {b : Set ‚Ñì} {f g : ‚ä• ‚Üí b} ‚Üí f ‚â° g
  ‚ä•-funeq = funext Œª {x} ‚Üí ‚ä•-elim x


  ------ Naturals ------

  from‚Ñï : ‚Ñï ‚Üí Œº Œ£-nat tt
  from‚Ñï zero =
    `Œº (inj‚ÇÅ tt , Œª())
  from‚Ñï (suc n) =
    `Œº ((inj‚ÇÇ tt) , (Œª { tt ‚Üí from‚Ñï n }))

  to‚Ñï : Œº Œ£-nat tt ‚Üí ‚Ñï
  to‚Ñï (`Œº (inj‚ÇÅ tt , _)) = zero
  to‚Ñï (`Œº (inj‚ÇÇ tt , snd)) =
    suc (to‚Ñï (snd tt))

  ‚Ñï-iso‚ÇÅ : ‚àÄ {n : ‚Ñï} ‚Üí to‚Ñï (from‚Ñï n) ‚â° n
  ‚Ñï-iso‚ÇÅ {zero} = refl
  ‚Ñï-iso‚ÇÅ {suc n} =
    cong suc ‚Ñï-iso‚ÇÅ

  ‚Ñï-iso‚ÇÇ : ‚àÄ {nf : Œº Œ£-nat tt} ‚Üí from‚Ñï (to‚Ñï nf) ‚â° nf
  ‚Ñï-iso‚ÇÇ {`Œº (inj‚ÇÅ tt , snd)} rewrite
    ‚ä•-funeq {b = Œº Œ£-nat tt}
            {f = snd} {g = Œª()}
    = refl 
  ‚Ñï-iso‚ÇÇ {`Œº (inj‚ÇÇ tt , snd)} =
    cong (Œª x ‚Üí `Œº (inj‚ÇÇ tt , Œª {tt ‚Üí x})) ‚Ñï-iso‚ÇÇ

  ‚Ñï‚âÖŒ£-nat : ‚Ñï ‚âÖ Œº Œ£-nat tt
  ‚Ñï‚âÖŒ£-nat = record { from = from‚Ñï
                   ; to = to‚Ñï
                   ; iso‚ÇÅ = ‚Ñï-iso‚ÇÅ
                   ; iso‚ÇÇ = ‚Ñï-iso‚ÇÇ
                   }

  ------ Finite Sets ------

  fromFin : ‚àÄ {n : ‚Ñï} ‚Üí Fin n ‚Üí Œº Œ£-fin n
  fromFin zero =
    `Œº (inj‚ÇÅ tt , Œª())
  fromFin (suc f) =
    `Œº (inj‚ÇÇ tt , Œª {tt ‚Üí fromFin f})

  toFin : ‚àÄ {n : ‚Ñï} ‚Üí Œº Œ£-fin n ‚Üí Fin n
  toFin {zero} (`Œº (() , snd))
  toFin {suc n} (`Œº (inj‚ÇÅ tt , snd)) = zero
  toFin {suc n} (`Œº (inj‚ÇÇ tt , snd)) =
    suc (toFin (snd tt))

  Fin-iso‚ÇÅ : ‚àÄ {n : ‚Ñï} {f : Fin n} ‚Üí toFin (fromFin f) ‚â° f
  Fin-iso‚ÇÅ {zero} {()}
  Fin-iso‚ÇÅ {suc n} {zero} = refl
  Fin-iso‚ÇÅ {suc n} {suc f} =
    cong suc Fin-iso‚ÇÅ

  Fin-iso‚ÇÇ : ‚àÄ {n : ‚Ñï} {f : Œº Œ£-fin n} ‚Üí fromFin (toFin f) ‚â° f
  Fin-iso‚ÇÇ {zero} {`Œº (() , snd)}
  Fin-iso‚ÇÇ {suc n} {`Œº (inj‚ÇÅ tt , snd)} rewrite
    funext' {a = ‚ä•} {f = snd} {g = Œª()}
            (Œª {x} ‚Üí ‚ä•-elim x)
    = refl
  Fin-iso‚ÇÇ {suc n} {`Œº (inj‚ÇÇ tt , snd)} =
    cong (Œª x ‚Üí `Œº ((inj‚ÇÇ tt) , Œª {tt ‚Üí x})) Fin-iso‚ÇÇ

  Fin‚âÖŒ£-fin : ‚àÄ {n : ‚Ñï} ‚Üí Fin n ‚âÖ Œº Œ£-fin n
  Fin‚âÖŒ£-fin = record { from = fromFin
                     ; to   = toFin
                     ; iso‚ÇÅ = Fin-iso‚ÇÅ
                     ; iso‚ÇÇ = Fin-iso‚ÇÇ 
                     }

  fin : ‚ü™ ùîæ·µ¢ (Œº Œ£-fin) ‚ü´
  fin Œº zero = uninhabited
  fin Œº (suc n) = ‚¶á (Œª x ‚Üí `Œº (inj‚ÇÅ tt , Œª())) (Œº n) ‚¶à

  ------ Lists ------

  fromList : ‚àÄ {a : Set} ‚Üí List a ‚Üí Œº (Œ£-list a) tt
  fromList [] =
    `Œº (inj‚ÇÅ tt , Œª ())
  fromList (x ‚à∑ xs) =
    `Œº (inj‚ÇÇ x , Œª {tt ‚Üí fromList xs})

  toList : ‚àÄ {a : Set} ‚Üí Œº ((Œ£-list a)) tt ‚Üí List a
  toList (`Œº (inj‚ÇÅ tt , snd)) = []
  toList (`Œº (inj‚ÇÇ y , snd)) =
    y ‚à∑ toList (snd tt)
  
  List-iso‚ÇÅ : ‚àÄ {a : Set} {xs : List a} ‚Üí toList (fromList xs) ‚â° xs
  List-iso‚ÇÅ {xs = []} = refl
  List-iso‚ÇÅ {xs = x ‚à∑ xs} =
    cong (_‚à∑_ x) List-iso‚ÇÅ

  List-iso‚ÇÇ : ‚àÄ {a : Set} {xs : Œº (Œ£-list a) tt } ‚Üí fromList (toList xs) ‚â° xs
  List-iso‚ÇÇ {a} {xs = `Œº (inj‚ÇÅ tt , snd)} rewrite
    ‚ä•-funeq {b = Œº (Œ£-list a) tt}
            {f = snd} {g = Œª()}
    = refl
  List-iso‚ÇÇ {xs = `Œº (inj‚ÇÇ y , snd)} =
    cong (Œª x ‚Üí `Œº (inj‚ÇÇ y , x))
         (funext List-iso‚ÇÇ)

  List‚âÖŒ£-list : ‚àÄ {a : Set} ‚Üí List a ‚âÖ Œº (Œ£-list a) tt
  List‚âÖŒ£-list = record { from = fromList
                       ; to   = toList
                       ; iso‚ÇÅ = List-iso‚ÇÅ
                       ; iso‚ÇÇ = List-iso‚ÇÇ
                       }

  ------ Vectors ------

  fromVec : ‚àÄ {a : Set} {n : ‚Ñï} ‚Üí Vec a n ‚Üí Œº (Œ£-vec a) n
  fromVec {n = 0}     []       =
    `Œº (tt , Œª())
  fromVec {n = suc n} (x ‚à∑ xs) =
    `Œº (x , Œª { tt ‚Üí fromVec xs })

  toVec : ‚àÄ {a : Set} {n : ‚Ñï} ‚Üí Œº (Œ£-vec a) n ‚Üí Vec a n
  toVec {n = zero} (`Œº (tt , snd)) = []
  toVec {n = suc n} (`Œº (x , snd)) =
    x ‚à∑ toVec (snd tt)

  Vec-iso‚ÇÅ : ‚àÄ {a : Set} {n : ‚Ñï} {xs : Vec a n} ‚Üí toVec (fromVec xs) ‚â° xs
  Vec-iso‚ÇÅ {xs = []} = refl
  Vec-iso‚ÇÅ {xs = x ‚à∑ xs} =
    cong (_‚à∑_ x) Vec-iso‚ÇÅ

  Vec-iso‚ÇÇ : ‚àÄ {a : Set} {n : ‚Ñï} {xs : Œº (Œ£-vec a) n} ‚Üí fromVec (toVec xs) ‚â° xs
  Vec-iso‚ÇÇ {n = zero}  {`Œº (tt , snd)} rewrite
    funext' {a = ‚ä•} {f = snd} {g = Œª()}
            (Œª {x} ‚Üí ‚ä•-elim x)
    = refl
  Vec-iso‚ÇÇ {n = suc n} {`Œº (fst , snd)} = cong (Œª x ‚Üí `Œº (fst , x)) (funext Vec-iso‚ÇÇ)

  Vec‚âÖŒ£-vec : ‚àÄ {a : Set} {n : ‚Ñï} ‚Üí Vec a n ‚âÖ Œº (Œ£-vec a) n
  Vec‚âÖŒ£-vec = record { from = fromVec
                     ; to   = toVec
                     ; iso‚ÇÅ = Vec-iso‚ÇÅ
                     ; iso‚ÇÇ = Vec-iso‚ÇÇ
                     }

  vec : ‚àÄ {a : Set} ‚Üí ‚ü™ ùîæ a ‚ü´ ‚Üí ‚ü™ ùîæ·µ¢ (Œº (Œ£-vec a)) ‚ü´
  vec a Œº zero    = ‚¶á (`Œº (tt , Œª())) ‚¶à
  vec a Œº (suc n) = ‚¶á (Œª x y ‚Üí `Œº (x , Œª { tt ‚Üí y })) ‚ü® a ‚ü© (Œº n) ‚¶à

  ------ LEQ ------
  
  from‚â§ : ‚àÄ {idx : ‚Ñï √ó ‚Ñï} ‚Üí (proj‚ÇÅ idx) ‚â§ (proj‚ÇÇ idx) ‚Üí Œº Œ£-‚â§ idx 
  from‚â§ z‚â§n = `Œº (tt , Œª())
  from‚â§ (s‚â§s p) =
    `Œº (tt , Œª { tt ‚Üí from‚â§ p })
  
  to‚â§ : ‚àÄ {idx : ‚Ñï √ó ‚Ñï} ‚Üí Œº Œ£-‚â§ idx ‚Üí proj‚ÇÅ idx ‚â§ proj‚ÇÇ idx
  to‚â§ {zero , snd‚ÇÅ} (`Œº (tt , snd)) = z‚â§n
  to‚â§ {suc fst‚ÇÅ , zero} (`Œº (() , snd))
  to‚â§ {suc fst‚ÇÅ , suc snd‚ÇÅ} (`Œº (tt , snd)) =
    s‚â§s (to‚â§ (snd tt))

  ‚â§-iso‚ÇÅ : ‚àÄ {idx : ‚Ñï √ó ‚Ñï} {p : proj‚ÇÅ idx ‚â§ proj‚ÇÇ idx} ‚Üí to‚â§ (from‚â§ p) ‚â° p
  ‚â§-iso‚ÇÅ {.0 , snd} {z‚â§n} = refl
  ‚â§-iso‚ÇÅ {.(suc _) , .(suc _)} {s‚â§s p} = cong s‚â§s ‚â§-iso‚ÇÅ

  ‚â§-iso‚ÇÇ : ‚àÄ {idx : ‚Ñï √ó ‚Ñï} {p : Œº Œ£-‚â§ idx} ‚Üí from‚â§ (to‚â§ p) ‚â° p
  ‚â§-iso‚ÇÇ {zero , snd‚ÇÅ} {`Œº (tt , snd)} rewrite
    funext' {a = ‚ä•} {f = snd}
            {g = Œª()} (Œª {x} ‚Üí ‚ä•-elim x)
    = refl
  ‚â§-iso‚ÇÇ {suc fst‚ÇÅ , zero} {`Œº (() , snd)}
  ‚â§-iso‚ÇÇ {suc fst‚ÇÅ , suc snd‚ÇÅ} {`Œº (fst , snd)} =
    cong (Œª x ‚Üí `Œº (fst , x)) (funext ‚â§-iso‚ÇÇ)

  ‚â§‚âÖŒ£-‚â§ : ‚àÄ {idx : ‚Ñï √ó ‚Ñï} ‚Üí (proj‚ÇÅ idx ‚â§ proj‚ÇÇ idx) ‚âÖ Œº Œ£-‚â§ idx
  ‚â§‚âÖŒ£-‚â§ = record { from = from‚â§
                 ; to   = to‚â§
                 ; iso‚ÇÅ = ‚â§-iso‚ÇÅ
                 ; iso‚ÇÇ = ‚â§-iso‚ÇÇ
                 }


  ------ Sorted ------

  fromSorted : ‚àÄ {xs : List ‚Ñï} ‚Üí Sorted xs ‚Üí Œº Œ£-Sorted xs
  fromSorted nil = `Œº (tt , Œª())
  fromSorted single =
    `Œº (tt , Œª())
  fromSorted (step' x‚ÇÅ p) =
    `Œº (x‚ÇÅ , Œª { tt ‚Üí fromSorted p } )

  toSorted : ‚àÄ {xs : List ‚Ñï} ‚Üí Œº Œ£-Sorted xs ‚Üí Sorted xs
  toSorted {[]} (`Œº (tt , snd)) = nil
  toSorted {x ‚à∑ []} (`Œº (tt , snd)) = single
  toSorted {x ‚à∑ x‚ÇÅ ‚à∑ xs} (`Œº (fst , snd)) =
    step' fst (toSorted (snd tt))

  Sorted-iso‚ÇÅ : ‚àÄ {xs : List ‚Ñï} {p : Sorted xs} ‚Üí toSorted (fromSorted p) ‚â° p
  Sorted-iso‚ÇÅ {[]} {nil} = refl
  Sorted-iso‚ÇÅ {x ‚à∑ []} {single} = refl
  Sorted-iso‚ÇÅ {x ‚à∑ x‚ÇÅ ‚à∑ xs} {step' x‚ÇÇ p} =
    cong (step' x‚ÇÇ) Sorted-iso‚ÇÅ

  Sorted-iso‚ÇÇ : ‚àÄ {xs : List ‚Ñï} {p : Œº Œ£-Sorted xs} ‚Üí fromSorted (toSorted p) ‚â° p
  Sorted-iso‚ÇÇ {[]} {`Œº (tt , snd)} rewrite
    funext' {a = ‚ä•} {f = snd}
            {g = Œª()} (Œª {x} ‚Üí ‚ä•-elim x)
    = refl
  Sorted-iso‚ÇÇ {x ‚à∑ []} {`Œº (tt , snd)} rewrite
    funext' {a = ‚ä•} {f = snd}
            {g = Œª()} (Œª{x} ‚Üí ‚ä•-elim x)
    = refl
  Sorted-iso‚ÇÇ {x ‚à∑ x‚ÇÅ ‚à∑ xs} {`Œº (fst , snd)} =
    cong (Œª x ‚Üí `Œº (fst , x)) (funext Sorted-iso‚ÇÇ)

  Sorted‚âÖŒ£-Sorted : ‚àÄ {xs : List ‚Ñï} ‚Üí Sorted xs ‚âÖ Œº Œ£-Sorted xs
  Sorted‚âÖŒ£-Sorted = record { from = fromSorted
                           ; to   = toSorted
                           ; iso‚ÇÅ = Sorted-iso‚ÇÅ
                           ; iso‚ÇÇ = Sorted-iso‚ÇÇ
                           }

  

  
  
